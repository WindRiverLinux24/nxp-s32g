From d8d71e0894bf2442e18f692a0fda8b6dd0cd5636 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Fri, 31 Mar 2023 21:24:21 +0800
Subject: [PATCH] s32g: hse: support Aptiv parallel secure boot feature

The major improvements of supporting Aptiv parallel secure boot
is to install reasonable SMRs(secure memory region) and reset core
entries for fip and autosar images.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 74 ++++++++++++++++++----
 include/hse/hse_abi.h                      |  4 +-
 2 files changed, 66 insertions(+), 12 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index 02483379..eaaa87a6 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -81,7 +81,11 @@ static inline int compare_uuids(const struct uuid *uuid1,
 
 static u32 get_m7_start(struct hse_private *priv)
 {
-	return priv->ivt.app_boot + APP_CODE_OFFSET;
+	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
+		return priv->ivt.app_boot + APP_CODE_OFFSET;
+	} else {
+		return priv->ivt.autosar_image_off + APP_CODE_OFFSET;
+	}
 }
 
 static u32 get_fip_start(struct hse_private *priv)
@@ -97,6 +101,7 @@ static u32 get_fip_start(struct hse_private *priv)
 			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
+		case APTIV_PARALLEL_SEC_BOOT:
 			fip_start = priv->ivt.fip_image_off + APP_CODE_OFFSET;
 			break;
 		default:
@@ -116,6 +121,7 @@ static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 	switch (priv->ivt.boot_type) {
 		case NXP_SEC_BOOT:
 		case APTIV_AUTOSAR_SEC_BOOT:
+		case APTIV_PARALLEL_SEC_BOOT:
 			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
 			break;
 		case NXP_M7_SEC_BOOT:
@@ -124,7 +130,7 @@ static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 			break;
 		default:
 			printf("ERROR: invalid fip start location!\n");
-			break;
+			return 0;
 	}
 	toc_header = (struct fip_toc_header *)fip_hdr_start;
 	toc_entry = (struct fip_toc_entry *)(toc_header + 1);
@@ -166,6 +172,7 @@ static u32 get_m7_sign_mmc(struct hse_private *priv)
 			m7_sign_off = get_m7_start(priv) + M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
+		case APTIV_PARALLEL_SEC_BOOT:
 			m7_sign_off = get_m7_start(priv) + priv->app_boot_hdr.code_len;
 			break;
 		default:
@@ -215,6 +222,15 @@ static int get_m7_sign_data(struct hse_private *priv)
 			}
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET;
 			break;
+		case APTIV_PARALLEL_SEC_BOOT:
+			hse_mmc_read((void *)priv->buf_space,
+								 ((priv->ivt.autosar_image_off + priv->app_boot_hdr.code_len)/ 512), 1);
+			if (ret) {
+				printf("ERROR: M7 signature read failed!\n");
+				return ret;
+			}
+			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
@@ -257,7 +273,7 @@ static int get_fip_sign_data(struct hse_private *priv)
 		}
 		fip_size = get_fip_size(priv);
 		if (!fip_size) {
-			printf("ERROR:	FIP signature read size!\n");
+			printf("ERROR: FIP signature read size!\n");
 			return -ENOMEM;
 		}
 	}
@@ -272,6 +288,7 @@ static int get_fip_sign_data(struct hse_private *priv)
 						M7_BOOT_CODE_SIZE + sign_offset;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
+		case APTIV_PARALLEL_SEC_BOOT:
 			fip_sig_blk_off = (priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size) /512;
 			fip_sig_off = (priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size) %512;
 			ret = hse_mmc_read((void *)priv->buf_space, fip_sig_blk_off, 2);
@@ -427,6 +444,17 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
 			priv->srv_desc.cr_install_req.cr_entry_index = 2u;
 			break;
+		case APTIV_PARALLEL_SEC_BOOT:
+			memset((void *)(uintptr_t)priv->buf_space, 0, sizeof(priv->buf_space));
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512, 1);
+			if (ret) {
+				printf("ERROR: FIP boot app header read failed!\n");
+				return ret;
+			}
+			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_2;
+			priv->cr_entry.pass_reset = ((struct app_boot_hdr *)priv->buf_space)->ram_entry;
+			priv->srv_desc.cr_install_req.cr_entry_index = 2u;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
@@ -475,6 +503,11 @@ int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
 			priv->cr_entry.pass_reset = priv->ivt.m7_image_entry_bak;
 			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
 			break;
+		case APTIV_PARALLEL_SEC_BOOT:
+			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1;
+			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
+			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
@@ -502,7 +535,8 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 	int ret = 0;
 
 	if (priv->ivt.boot_type == NXP_SEC_BOOT ||
-		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT) {
+		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT || 
+		priv->ivt.boot_type == APTIV_PARALLEL_SEC_BOOT ) {
 		ret = hse_install_fip_cr_entry(priv, recv_buf);
 		if (ret) {
 			printf("ERROR: fip core reset entry install failed!\n");
@@ -510,9 +544,7 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 		}
 	}
 
-	if (priv->ivt.boot_type == NXP_M7_SEC_BOOT ||
-		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT ||
-		priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT) {
+	if (priv->ivt.boot_type > NXP_SEC_BOOT) {
 		ret = hse_install_m7_cr_entry(priv, recv_buf);
 		if (ret) {
 			printf("ERROR: m7 core reset entry install failed!\n");
@@ -599,6 +631,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_install_req->entry_index = 2u;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
+		case APTIV_PARALLEL_SEC_BOOT:
 			smr_entry->smr_src =  priv->ivt.fip_image_off + APP_CODE_OFFSET;
 			smr_entry->smr_dst_addr =((struct app_boot_hdr *)priv->buf_space)->ram_load;
 			smr_entry->smr_size = fip_size;
@@ -653,8 +686,13 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-								 (priv->app_boot_hdr.code_len / 512) + 1);
+	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
+		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+									 (priv->app_boot_hdr.code_len / 512) + 1);
+	} else {
+		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.autosar_image_off / 512,
+									 (priv->app_boot_hdr.code_len / 512) + 1);
+	}
 	if (ret) {
 		printf("ERROR: m7 code read failed!\n");
 		return ret;
@@ -695,6 +733,15 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_entry->smr_size = priv->app_boot_hdr.code_len;
 			smr_entry->auth_tag = get_m7_sign_mmc(priv);
 
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
+			smr_install_req->smr_data_len = priv->app_boot_hdr.code_len;
+			break;
+		case APTIV_PARALLEL_SEC_BOOT:
+			smr_entry->smr_src = priv->ivt.autosar_image_off + APP_CODE_OFFSET;
+			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_entry->smr_size = priv->app_boot_hdr.code_len;
+			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
 			smr_install_req->smr_data_len = priv->app_boot_hdr.code_len;
 			break;
@@ -877,8 +924,13 @@ static int get_app_header(struct hse_private *priv)
 {
 	int ret = 0;
 
-	ret = hse_mmc_read((void *)&priv->app_boot_hdr,
-			   (priv->ivt.app_boot / 512), 1);
+	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
+		ret = hse_mmc_read((void *)&priv->app_boot_hdr,
+				   (priv->ivt.app_boot / 512), 1);
+	} else {
+		ret = hse_mmc_read((void *)&priv->app_boot_hdr,
+				   (priv->ivt.autosar_image_off/ 512), 1);
+	}
 
 	return ret;
 }
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index c7075694..32b1b282 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -202,7 +202,8 @@ struct ivt {
 	u32 m7_image_size;
 	u32 m7_image_entry_bak;
 	u32 fip_image_off;
-	u8 reserved4[240];
+	u32 autosar_image_off;
+	u8 reserved4[236];
 } __packed;
 
 /**
@@ -498,6 +499,7 @@ enum boot_type {
 	NXP_M7_SEC_BOOT,
 	NXP_PARALLEL_SEC_BOOT,
 	APTIV_AUTOSAR_SEC_BOOT,
+	APTIV_PARALLEL_SEC_BOOT,
 };
 
 
-- 
2.34.1

