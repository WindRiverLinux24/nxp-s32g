From a12dfafac4cdea2c4bcbd8d28a20090f6dba001f Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Wed, 29 Mar 2023 14:13:27 +0800
Subject: [PATCH] s32g: hse: support M7 secure boot feature

The major improvements to support M7 secure boot feature as below:
- install SMR(secure memory region) for M7 image
- set reset core as M7_0

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 237 +++++++++++++++++++--
 include/hse/hse_abi.h                      |   7 +-
 2 files changed, 226 insertions(+), 18 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index 9879b017..a7911206 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -52,6 +52,8 @@ DECLARE_GLOBAL_DATA_PTR;
 {0u, 0u, 0u, 0u, 0u}
 
 #define APP_CODE_OFFSET 0x40
+#define M7_BOOT_CODE_SIZE 0x2000
+#define M7_SIGNATURE_SIZE 0x100
 
 #define UUID_BL2_CERT \
 	{ 0xea69e2d6, \
@@ -77,18 +79,47 @@ static inline int compare_uuids(const struct uuid *uuid1,
 	return memcmp(uuid1, uuid2, sizeof(struct uuid));
 }
 
-static u32 get_fip_start(struct hse_private *priv)
+static u32 get_m7_start(struct hse_private *priv)
 {
 	return priv->ivt.app_boot + APP_CODE_OFFSET;
 }
 
+static u32 get_fip_start(struct hse_private *priv)
+{
+	u32 fip_start = 0;
+
+	switch (priv->ivt.boot_type) {
+		case NXP_SEC_BOOT:
+			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET;
+			break;
+		case NXP_M7_SEC_BOOT:
+			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
+			break;
+		default:
+			printf("ERROR: invalid fip start offset!\n");
+			break;
+	}
+
+	return fip_start;
+}
+
 static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 {
 	struct fip_toc_header *toc_header;
 	struct fip_toc_entry *toc_entry;
 	uintptr_t fip_hdr_start, fip_hdr_end;
 
-	fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
+	switch (priv->ivt.boot_type) {
+		case NXP_SEC_BOOT:
+			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
+			break;
+		case NXP_M7_SEC_BOOT:
+			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
+			break;
+		default:
+			printf("ERROR: invalid fip start location!\n");
+			break;
+	}
 	toc_header = (struct fip_toc_header *)fip_hdr_start;
 	toc_entry = (struct fip_toc_entry *)(toc_header + 1);
 
@@ -118,6 +149,11 @@ static u64 get_fip_sign_offset(struct hse_private *priv)
 	return get_fip_toc_offset(priv, &uuid_bl2_cert);
 }
 
+static u32 get_m7_sign_mmc(struct hse_private *priv)
+{
+	return get_m7_start(priv) + M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
+}
+
 static u32 get_fip_sign_mmc(struct hse_private *priv)
 {
 	u32 sign_offset;
@@ -129,29 +165,58 @@ static u32 get_fip_sign_mmc(struct hse_private *priv)
 	return get_fip_start(priv) + sign_offset;
 }
 
+static uintptr_t get_m7_sign_data(struct hse_private *priv)
+{
+	u64 sign_addr;
+
+	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
+	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+			 (priv->app_boot_hdr.code_len / 512) + 1);
+
+	switch (priv->ivt.boot_type) {
+		case NXP_M7_SEC_BOOT:
+			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
+						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
+			break;
+		default:
+			printf("ERROR: invalid secure boot type!\n");
+			return -1;
+	}
+
+	memcpy((void *)priv->m7_signature, (void *)sign_addr, M7_SIGNATURE_SIZE);
+
+	return 0;
+}
+
 static uintptr_t get_fip_sign_data(struct hse_private *priv)
 {
 	uintptr_t sign_offset;
 	u64 sign_addr;
 
+	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
+	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+			 (priv->app_boot_hdr.code_len / 512) + 1);
+	sign_offset = (uintptr_t)get_fip_sign_offset(priv);
+	if (!sign_offset) {
+		printf("ERROR: FIP signature read failed!\n");
+		return -ENOMEM;
+	}
+
 	switch (priv->ivt.boot_type) {
 		case NXP_SEC_BOOT:
-			memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-			hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-					 (priv->app_boot_hdr.code_len / 512) + 1);
-			sign_offset = (uintptr_t)get_fip_sign_offset(priv);
-			if (!sign_offset) {
-				printf("ERROR: FIP signature read failed!\n");
-				return -ENOMEM;
-			}
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET + sign_offset;
-			memcpy((void *)priv->fip_signature, (void *)sign_addr, HSE_FIP_AUTH_LEN);
+			break;
+		case NXP_M7_SEC_BOOT:
+			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
+						M7_BOOT_CODE_SIZE + sign_offset;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
 	}
 
+	memcpy((void *)priv->fip_signature, (void *)sign_addr, HSE_FIP_AUTH_LEN);
+
 	return 0;
 }
 
@@ -165,6 +230,14 @@ static int get_signature(struct hse_private *priv)
 		return ret;
 	}
 
+	if (priv->ivt.boot_type > NXP_SEC_BOOT) {
+		ret = get_m7_sign_data(priv);
+		if (ret) {
+			printf("ERROR: get m7 signature data failed!\n");
+			return ret;
+		}
+	}
+
 	return ret;
 }
 
@@ -299,26 +372,72 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	ret = hse_install_cr_entry(priv, recv_buf);
 	if (ret) {
-		printf("ERROR: install FIP smr failed!\n");
+		printf("ERROR: install FIP Core Reset failed!\n");
 		return ret;
 	}
 
 	return ret;
 }
 
-int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
+int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
 {
-	int ret = 0;
+	int ret;
 
-	ret = hse_install_fip_cr_entry(priv, recv_buf);
+	printf("\tGenerating M7 Core Reset Entry...\n");
+	memset((void *)&priv->cr_entry, 0, sizeof(struct hse_cr_entry));
+	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
+
+	switch (priv->ivt.boot_type) {
+		case NXP_M7_SEC_BOOT:
+			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1 | HSE_SMR_ENTRY_2;
+			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
+			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
+			break;
+		default:
+			printf("ERROR: invalid secure boot type!\n");
+			return -1;
+	}
+
+	priv->cr_entry.core_id = HSE_APP_M7_0;
+	priv->cr_entry.cr_sanction = HSE_CR_SANCTION_KEEP_CORE_IN_RESET;
+	priv->cr_entry.start_option = HSE_CR_AUTO_START;
+
+	priv->srv_desc.srv_id = HSE_SRV_ID_CORE_RESET_ENTRY_INSTALL;
+	priv->srv_desc.cr_install_req.cr_entry_addr =
+					(uintptr_t)&priv->cr_entry;
+
+	ret = hse_install_cr_entry(priv, recv_buf);
 	if (ret) {
-		printf("ERROR: fip core reset entry install failed!\n");
+		printf("ERROR: install M7 Core Reset failed!\n");
 		return ret;
 	}
 
 	return ret;
 }
 
+int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
+{
+	int ret = 0;
+
+	if (priv->ivt.boot_type == NXP_SEC_BOOT) {
+		ret = hse_install_fip_cr_entry(priv, recv_buf);
+		if (ret) {
+			printf("ERROR: fip core reset entry install failed!\n");
+			return ret;
+		}
+	}
+
+	if (priv->ivt.boot_type == NXP_M7_SEC_BOOT) {
+		ret = hse_install_m7_cr_entry(priv, recv_buf);
+		if (ret) {
+			printf("ERROR: m7 core reset entry install failed!\n");
+			return ret;
+		}
+	}
+
+	return ret;
+}
+
 int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
 {
 	int ret = 0;
@@ -370,6 +489,16 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
 			smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
+			smr_install_req->entry_index = 1u;
+			break;
+		case NXP_M7_SEC_BOOT:
+			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
+			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load + M7_BOOT_CODE_SIZE;
+			smr_entry->auth_tag = get_fip_sign_mmc(priv);
+
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE);
+			smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
+			smr_install_req->entry_index = 2u;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
@@ -388,7 +517,6 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	priv->srv_desc.srv_id = HSE_SRV_ID_SMR_ENTRY_INSTALL;
 	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
-	smr_install_req->entry_index = 1u;
 	smr_install_req->smr_entry_addr = (uintptr_t)smr_entry;
 	smr_install_req->smr_auth_tag_addr = (uintptr_t)priv->fip_signature;
 	smr_install_req->smr_auth_tag_len = HSE_FIP_AUTH_LEN;
@@ -402,6 +530,73 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	return ret;
 }
 
+int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
+{
+	struct hse_smr_entry *smr_entry;
+	struct hse_smr_install_srv *smr_install_req;
+	u32 m7_size;
+	u32 align_diff;
+	int ret = 0;
+
+	smr_entry = &(priv->smr_entry);
+	smr_install_req = &(priv->srv_desc.smr_install_req);
+
+	printf("\tGenerating M7 Secure Memory Region entry...\n");
+	memset((void *)&priv->smr_entry, 0, sizeof(struct hse_smr_entry));
+	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
+
+	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
+	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
+	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+				 (priv->app_boot_hdr.code_len / 512) + 1);
+
+	m7_size = priv->ivt.m7_image_size;
+
+	switch (priv->ivt.boot_type) {
+		case NXP_M7_SEC_BOOT:
+			/*
+			  *  For M7 code, it must align with 128 byte in ram,
+			  *  so get the diff between load address and entry address
+			  */
+			align_diff = priv->app_boot_hdr.ram_entry - priv->app_boot_hdr.ram_load;
+			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
+			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_entry;
+			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
+			smr_install_req->smr_data_len = m7_size;
+			break;
+		default:
+			printf("ERROR: invalid secure boot type!\n");
+			return -1;
+	}
+
+	smr_entry->smr_size = m7_size;
+	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
+				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
+	smr_entry->check_period = 0;
+	smr_entry->key_handle = HSE_BOOT_KEY_HANDLE;
+	smr_entry->sign_sch.sign_scheme = HSE_SIGN_RSASSA_PKCS1_V15;
+	smr_entry->sign_sch.sch.hash_algo = HSE_HASH_ALGO_SHA_1;
+	smr_entry->decrypt_key_handle = HSE_SMR_DECRYPT_KEY_HANDLE_NOT_USED;
+	smr_entry->version_offset = 0;
+
+	priv->srv_desc.srv_id = HSE_SRV_ID_SMR_ENTRY_INSTALL;
+	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
+	smr_install_req->entry_index = 1u;
+	smr_install_req->smr_entry_addr = (uintptr_t)smr_entry;
+	smr_install_req->smr_auth_tag_addr = (uintptr_t)priv->m7_signature;
+	smr_install_req->smr_auth_tag_len = M7_SIGNATURE_SIZE;
+
+	ret = hse_install_smr_entry(priv, recv_buf);
+	if (ret) {
+		printf("ERROR: install M7 smr failed!\n");
+		return ret;
+	}
+
+	return ret;
+}
+
 int hse_install_smr_entries(struct hse_private *priv, u32 *recv_buf)
 {
 	int ret = 0;
@@ -412,6 +607,14 @@ int hse_install_smr_entries(struct hse_private *priv, u32 *recv_buf)
 		return ret;
 	}
 
+	if (priv->ivt.boot_type > NXP_SEC_BOOT) {
+		ret = hse_install_m7_smr_entry(priv, recv_buf);
+		if (ret) {
+			printf("ERROR: m7 smr entry install failed!\n");
+			return ret;
+		}
+	}
+
 	return ret;
 }
 
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index 79616a53..cc5d1b7e 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -51,6 +51,7 @@
 
 #define HSE_ACCESS_MODE_ONE_PASS 0u
 
+#define HSE_APP_M7_0 0u /* M7_0 */
 #define HSE_APP_CORE3 3u /* A53_0 of S32G2 SoC */
 #define HSE_APP_CORE4 4u /* A53_0 of S32G3 SoC */
 
@@ -62,6 +63,7 @@
 #define HSE_SMR_CFG_FLAG_SD_FLASH     0x2u
 #define HSE_SMR_CFG_FLAG_INSTALL_AUTH BIT(2)
 #define HSE_SMR_ENTRY_1               BIT(1)
+#define HSE_SMR_ENTRY_2               BIT(2)
 
 #define HSE_CR_SANCTION_KEEP_CORE_IN_RESET 0x7455u
 #define HSE_CR_AUTO_START                  0x35A5u
@@ -197,7 +199,8 @@ struct ivt {
 	u32 gmac[4];
 	/* pad to block size - 512 bytes */
 	u32 boot_type;
-	u8 reserved4[252];
+	u32 m7_image_size;
+	u8 reserved4[248];
 } __packed;
 
 /**
@@ -477,6 +480,7 @@ struct hse_private {
 	u8 rsa_exponent[3];
 	u8 reserved;
 	u8 fip_signature[256];
+	u8 m7_signature[256];
 	u8 sys_img[HSE_SYS_IMG_MAX_SIZE];
 	u32 sys_img_len;
 	u32 publish_offset;
@@ -489,6 +493,7 @@ enum boot_type {
 	/* boot types defines */
 	NON_SEC_BOOT = 0,
 	NXP_SEC_BOOT,
+	NXP_M7_SEC_BOOT,
 };
 
 
-- 
2.34.1

