From 688bb1df6be8537b6c50df9be369d945234d745e Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Wed, 10 Jan 2024 22:50:09 +0800
Subject: [PATCH] s32g: hse: add code to support qspi secure boot feature

After upgrading nxp-s32g BSP based on NXP SDK BSP39, it is able to
create bootloader image with qspi secure boot feature. So, add code
to improve the hse_secboot_enable command so that qspi secure boot
feature is able to be enabled from u-boot.

Upstream-Status: Inappropriate [WR Linux specific]

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 390 ++++++++++++++++-----
 include/hse/hse_abi.h                      |   7 +
 2 files changed, 300 insertions(+), 97 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index 89b7e08fe8..c70fa9cbe8 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -15,6 +15,10 @@
 #include <hse/hse_mu.h>
 #include <fdt_support.h>
 #include <asm/global_data.h>
+#include <asm/cache.h>
+#include <spi.h>
+#include <spi_flash.h>
+#include <linux/mtd/mtd.h>
 
 #if defined(CONFIG_SD_BOOT) || defined(CONFIG_QSPI_BOOT)
 DECLARE_GLOBAL_DATA_PTR;
@@ -76,6 +80,8 @@ static const struct hse_key_group_cfg_entry ram_orig_cat[] = {
 
 static struct hse_smr_dynamic_config smr_dynamic_config;
 
+static struct spi_flash *qspi_flash;
+
 /* return 0 for equal uuids */
 static inline int compare_uuids(const struct uuid *uuid1,
 				const struct uuid *uuid2)
@@ -170,7 +176,7 @@ static u64 get_fip_sign_offset(struct hse_private *priv)
 	return get_fip_toc_offset(priv, &uuid_bl2_cert);
 }
 
-static u32 get_m7_sign_mmc(struct hse_private *priv)
+static u32 get_m7_sign_from_dev(struct hse_private *priv)
 {
 	u32 m7_sign_off = 0;
 
@@ -192,7 +198,7 @@ static u32 get_m7_sign_mmc(struct hse_private *priv)
 	return m7_sign_off;
 }
 
-static u32 get_fip_sign_mmc(struct hse_private *priv)
+static u32 get_fip_sign_from_dev(struct hse_private *priv)
 {
 	u32 sign_offset;
 
@@ -203,7 +209,7 @@ static u32 get_fip_sign_mmc(struct hse_private *priv)
 	return get_fip_start(priv) + sign_offset;
 }
 
-static int get_m7_sign_data(struct hse_private *priv)
+static int get_m7_sign_data(struct hse_private *priv, bool qspi_boot)
 {
 	u64 sign_addr;
 	int ret = 0;
@@ -213,8 +219,12 @@ static int get_m7_sign_data(struct hse_private *priv)
 	switch (priv->ivt.boot_type) {
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
-			hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-									 sizeof(priv->buf_space) / 512);
+			if (qspi_boot)
+				ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
+									sizeof(priv->buf_space), (void *)&priv->buf_space);
+			else
+				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+										 sizeof(priv->buf_space) / 512);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
@@ -223,22 +233,38 @@ static int get_m7_sign_data(struct hse_private *priv)
 						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE; 
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
-			hse_mmc_read((void *)priv->buf_space,
-								 ((priv->ivt.app_boot + priv->app_boot_hdr.code_len)/ 512), 1);
+			if (qspi_boot)
+				ret = spi_flash_read(qspi_flash,
+									priv->ivt.app_boot + APP_CODE_OFFSET + priv->app_boot_hdr.code_len,
+									M7_SIGNATURE_SIZE, (void *)&priv->buf_space);
+			else
+				ret = hse_mmc_read((void *)priv->buf_space,
+									 ((priv->ivt.app_boot + priv->app_boot_hdr.code_len)/ 512), 1);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
-			sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
+			if (qspi_boot)
+				sign_addr = (uintptr_t)priv->buf_space;
+			else
+				sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			break;
 		case APTIV_PARALLEL_SEC_BOOT:
-			hse_mmc_read((void *)priv->buf_space,
-								 ((priv->ivt.autosar_image_off + priv->app_boot_hdr.code_len)/ 512), 1);
+			if (qspi_boot)
+				ret = spi_flash_read(qspi_flash,
+									priv->ivt.autosar_image_off + APP_CODE_OFFSET + priv->app_boot_hdr.code_len,
+									M7_SIGNATURE_SIZE, (void *)&priv->buf_space);
+			else
+				ret = hse_mmc_read((void *)priv->buf_space,
+									 ((priv->ivt.autosar_image_off + priv->app_boot_hdr.code_len)/ 512), 1);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
-			sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
+			if (qspi_boot)
+				sign_addr = (uintptr_t)priv->buf_space;
+			else
+				sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
@@ -250,20 +276,22 @@ static int get_m7_sign_data(struct hse_private *priv)
 	return 0;
 }
 
-static int get_fip_sign_data(struct hse_private *priv)
+static int get_fip_sign_data(struct hse_private *priv, bool qspi_boot)
 {
 	uintptr_t sign_offset = 0;;
 	u64 sign_addr;
 	u32 fip_size = 0;
-	u32 fip_sig_blk_off;
-	u32 fip_sig_off;
 	int ret = 0;
 
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
 
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
-		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-							sizeof(priv->buf_space) / 512);
+		if (qspi_boot)
+			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
+								sizeof(priv->buf_space), (void *)&priv->buf_space);
+		else
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+								sizeof(priv->buf_space) / 512);
 		if (ret) {
 				printf("ERROR: FIP signature read failed!\n");
 				return ret;
@@ -274,8 +302,12 @@ static int get_fip_sign_data(struct hse_private *priv)
 			return -ENOMEM;
 		}
 	} else {
-		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
-						sizeof(priv->buf_space) / 512);
+		if (qspi_boot)
+			ret = spi_flash_read(qspi_flash, priv->ivt.fip_image_off,
+								sizeof(priv->buf_space), (void *)&priv->buf_space);
+		else
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
+							sizeof(priv->buf_space) / 512);
 		if (ret) {
 			printf("ERROR: FIP signature read failed!\n");
 			return ret;
@@ -298,14 +330,7 @@ static int get_fip_sign_data(struct hse_private *priv)
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
 		case APTIV_PARALLEL_SEC_BOOT:
-			fip_sig_blk_off = (get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET) + fip_size) /512;
-			fip_sig_off = (get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET) + fip_size) %512;
-			ret = hse_mmc_read((void *)priv->buf_space, fip_sig_blk_off, 2);
-			if (ret) {
-				printf("ERROR: FIP signature read failed!\n");
-				return ret;
-			}
-			sign_addr = (u64)priv->buf_space + fip_sig_off;
+			sign_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + fip_size;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
@@ -317,18 +342,18 @@ static int get_fip_sign_data(struct hse_private *priv)
 	return 0;
 }
 
-static int get_signature(struct hse_private *priv)
+static int get_signature(struct hse_private *priv, bool qspi_boot)
 {
 	int ret = 0;
 
-	ret = get_fip_sign_data(priv);
+	ret = get_fip_sign_data(priv, qspi_boot);
 	if (ret) {
 		printf("ERROR: get fip signature data failed!\n");
 		return ret;
 	}
 
 	if (priv->ivt.boot_type > NXP_SEC_BOOT) {
-		ret = get_m7_sign_data(priv);
+		ret = get_m7_sign_data(priv, qspi_boot);
 		if (ret) {
 			printf("ERROR: get m7 signature data failed!\n");
 			return ret;
@@ -434,7 +459,7 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	return 0;
 }
 
-int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	int ret;
 
@@ -455,7 +480,11 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 			break;
 		case APTIV_PARALLEL_SEC_BOOT:
 			memset((void *)(uintptr_t)priv->buf_space, 0, sizeof(priv->buf_space));
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512, 1);
+			if (qspi_boot)
+				ret = spi_flash_read(qspi_flash, priv->ivt.fip_image_off,
+										sizeof(struct app_boot_hdr), (void *)&priv->buf_space);
+			else
+				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512, 1);
 			if (ret) {
 				printf("ERROR: FIP boot app header read failed!\n");
 				return ret;
@@ -492,7 +521,7 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	return ret;
 }
 
-int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	int ret;
 
@@ -539,14 +568,14 @@ int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	return ret;
 }
 
-int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
+int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	int ret = 0;
 
 	if (priv->ivt.boot_type == NXP_SEC_BOOT ||
 		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT || 
 		priv->ivt.boot_type == APTIV_PARALLEL_SEC_BOOT ) {
-		ret = hse_install_fip_cr_entry(priv, recv_buf);
+		ret = hse_install_fip_cr_entry(priv, recv_buf, qspi_boot);
 		if (ret) {
 			printf("ERROR: fip core reset entry install failed!\n");
 			return ret;
@@ -554,7 +583,7 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 	}
 
 	if (priv->ivt.boot_type > NXP_SEC_BOOT) {
-		ret = hse_install_m7_cr_entry(priv, recv_buf);
+		ret = hse_install_m7_cr_entry(priv, recv_buf, qspi_boot);
 		if (ret) {
 			printf("ERROR: m7 core reset entry install failed!\n");
 			return ret;
@@ -565,7 +594,7 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 }
 
 int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf,
-								struct hse_smr_dynamic_config *dynamic_config)
+								struct hse_smr_dynamic_config *dynamic_config, bool qspi_boot)
 {
 	struct hse_smr_entry *smr_entry;
 	struct hse_smr_install_srv *smr_install_req;
@@ -580,8 +609,12 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf,
 	smr_entry->smr_src = dynamic_config->entry_smr_src;
 	smr_entry->smr_dst_addr = dynamic_config->entry_smr_dst_addr;
 	smr_entry->smr_size = dynamic_config->entry_smr_size;
-	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
-				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
+	if (qspi_boot)
+		smr_entry->config_flags = (HSE_SMR_CFG_FLAG_QSPI_FLASH |
+					   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
+	else
+		smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
+					   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
 	smr_entry->check_period = 0;
 	smr_entry->key_handle = HSE_BOOT_KEY_HANDLE;
 	smr_entry->sign_sch.sign_scheme = HSE_SIGN_RSASSA_PKCS1_V15;
@@ -613,7 +646,7 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf,
 	return 0;
 }
 
-int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	u32 fip_size;
 	int ret = 0;
@@ -624,11 +657,19 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
-		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+		if (qspi_boot)
+			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
+							sizeof(priv->buf_space), (void *)&priv->buf_space);
+		else
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
 								sizeof(priv->buf_space) / 512);
 	} else {
-		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
-								sizeof(priv->buf_space) / 512);
+		if (qspi_boot)
+			ret = spi_flash_read(qspi_flash, priv->ivt.fip_image_off,
+							sizeof(priv->buf_space), (void *)&priv->buf_space);
+		else
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
+									sizeof(priv->buf_space) / 512);
 	}
 
 	if (ret) {
@@ -647,7 +688,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET);
 			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load;
 			smr_dynamic_config.entry_smr_size = fip_size - HSE_FIP_AUTH_LEN;
-			smr_dynamic_config.entry_auth_tag = get_fip_sign_mmc(priv);
+			smr_dynamic_config.entry_auth_tag = get_fip_sign_from_dev(priv);
 
 			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			smr_dynamic_config.req_smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
@@ -658,7 +699,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + M7_BOOT_CODE_SIZE;
 			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load + M7_BOOT_CODE_SIZE;
 			smr_dynamic_config.entry_smr_size = fip_size - HSE_FIP_AUTH_LEN;
-			smr_dynamic_config.entry_auth_tag = get_fip_sign_mmc(priv);
+			smr_dynamic_config.entry_auth_tag = get_fip_sign_from_dev(priv);
 
 			smr_dynamic_config.req_smr_data_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + M7_BOOT_CODE_SIZE;
 			smr_dynamic_config.req_smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
@@ -683,7 +724,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	smr_dynamic_config.req_smr_auth_tag_addr = (uintptr_t)priv->fip_signature;
 	smr_dynamic_config.req_smr_auth_tag_len = HSE_FIP_AUTH_LEN;
 
-	ret = hse_install_smr_entry(priv, recv_buf, &smr_dynamic_config);
+	ret = hse_install_smr_entry(priv, recv_buf, &smr_dynamic_config, qspi_boot);
 	if (ret) {
 		printf("ERROR: install FIP smr failed!\n");
 		return ret;
@@ -692,7 +733,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	return ret;
 }
 
-int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	u32 align_diff;
 	int ret = 0;
@@ -703,15 +744,28 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
-		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-									sizeof(priv->buf_space) / 512);
-	} else {
-		if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-										(priv->app_boot_hdr.code_len / 512) + 1);
+		if (qspi_boot)
+			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
+							sizeof(priv->buf_space), (void *)&priv->buf_space);
 		else
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.autosar_image_off / 512,
-										 (priv->app_boot_hdr.code_len / 512) + 1);
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+										sizeof(priv->buf_space) / 512);
+	} else {
+		if (qspi_boot) {
+			if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
+				ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
+							priv->app_boot_hdr.code_len + APP_CODE_OFFSET, (void *)&priv->buf_space);
+			else
+				ret = spi_flash_read(qspi_flash, priv->ivt.autosar_image_off,
+							priv->app_boot_hdr.code_len + APP_CODE_OFFSET, (void *)&priv->buf_space);
+		} else {
+			if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
+				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+											(priv->app_boot_hdr.code_len / 512) + 1);
+			else
+				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.autosar_image_off / 512,
+											 (priv->app_boot_hdr.code_len / 512) + 1);
+		}
 	}
 	if (ret) {
 		printf("ERROR: m7 code read failed!\n");
@@ -728,7 +782,7 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + align_diff;
 			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_entry;
 			smr_dynamic_config.entry_smr_size = priv->ivt.m7_image_size;
-			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_from_dev(priv);
 
 			smr_dynamic_config.req_smr_data_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + align_diff;
 			smr_dynamic_config.req_smr_data_len = priv->ivt.m7_image_size;
@@ -742,7 +796,7 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + align_diff;
 			smr_dynamic_config.entry_smr_dst_addr = priv->ivt.m7_image_entry_bak;
 			smr_dynamic_config.entry_smr_size = priv->ivt.m7_image_size;
-			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_from_dev(priv);
 
 			smr_dynamic_config.req_smr_data_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + align_diff;
 			smr_dynamic_config.req_smr_data_len = priv->ivt.m7_image_size;
@@ -751,7 +805,7 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET);
 			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load;
 			smr_dynamic_config.entry_smr_size = priv->app_boot_hdr.code_len;
-			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_from_dev(priv);
 
 			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			smr_dynamic_config.req_smr_data_len = priv->app_boot_hdr.code_len;
@@ -760,7 +814,7 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.autosar_image_off, APP_CODE_OFFSET);
 			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load;
 			smr_dynamic_config.entry_smr_size = priv->app_boot_hdr.code_len;
-			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_from_dev(priv);
 
 			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			smr_dynamic_config.req_smr_data_len = priv->app_boot_hdr.code_len;
@@ -774,7 +828,7 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	smr_dynamic_config.req_smr_auth_tag_addr = (u64)priv->m7_signature;
 	smr_dynamic_config.req_smr_auth_tag_len = M7_SIGNATURE_SIZE;
 
-	ret = hse_install_smr_entry(priv, recv_buf, &smr_dynamic_config);
+	ret = hse_install_smr_entry(priv, recv_buf, &smr_dynamic_config, qspi_boot);
 	if (ret) {
 		printf("ERROR: install M7 smr failed!\n");
 		return ret;
@@ -783,18 +837,18 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	return ret;
 }
 
-int hse_install_smr_entries(struct hse_private *priv, u32 *recv_buf)
+int hse_install_smr_entries(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	int ret = 0;
 
-	ret = hse_install_fip_smr_entry(priv, recv_buf);
+	ret = hse_install_fip_smr_entry(priv, recv_buf, qspi_boot);
 	if (ret) {
 		printf("ERROR: fip smr entry install failed!\n");
 		return ret;
 	}
 
 	if (priv->ivt.boot_type > NXP_SEC_BOOT) {
-		ret = hse_install_m7_smr_entry(priv, recv_buf);
+		ret = hse_install_m7_smr_entry(priv, recv_buf, qspi_boot);
 		if (ret) {
 			printf("ERROR: m7 smr entry install failed!\n");
 			return ret;
@@ -837,38 +891,111 @@ int hse_generate_sys_img(struct hse_private *priv, u32 *recv_buf)
 	return 0;
 }
 
-int hse_write_sys_img(struct hse_private *priv, bool secure)
+/**
+ * This function takes a byte length and a delta unit of time to compute the
+ * approximate bytes per second
+ *
+ * @param len		amount of bytes currently processed
+ * @param start_ms	start time of processing in ms
+ * Return: bytes per second if OK, 0 on error
+ */
+static ulong bytes_per_second(unsigned int len, ulong start_ms)
+{
+	/* less accurate but avoids overflow */
+	if (len >= ((unsigned int) -1) / 1024)
+		return len / (max(get_timer(start_ms) / 1024, 1UL));
+	else
+		return 1024 * len / max(get_timer(start_ms), 1UL);
+}
+
+int hse_write_sys_img(struct hse_private *priv, bool secure, bool qspi_boot)
 {
 	int ret;
 	u32 sys_img_blk, sys_img_num_blks;
+	uint8_t buf[2 * QSPI_BLOCK_SIZE];
+	uint8_t *sysimage, *ivtimage;
+	uint32_t rem, div;
 
 	printf("\tPublishing SYS_IMG...\n");
 
 	flush_dcache_range((u64)priv,
 			   (u64)priv + sizeof(struct hse_private));
 
-	sys_img_blk = priv->ivt.sys_img / 512;
-	sys_img_num_blks = HSE_SYS_IMG_MAX_SIZE / 512;
+	if (qspi_boot) {
+		sysimage = buf;
+		// Reading max 2 blocks, as SYSIMG Offset may be present at the end of QSPI block
+		div = priv->ivt.sys_img / QSPI_BLOCK_SIZE;
+		rem = priv->ivt.sys_img % QSPI_BLOCK_SIZE;
+		ret = spi_flash_read(qspi_flash, div * QSPI_BLOCK_SIZE,
+							2 * QSPI_BLOCK_SIZE, (void *)sysimage);
+		if (ret) {
+			printf("ERROR: sys-img publish failed during reading data!\n");
+			return ret;
+		}
 
-	ret = hse_mmc_write(&priv->sys_img, sys_img_blk, sys_img_num_blks);
-	if (ret) {
-		printf("ERROR: sys-img publish failed!\n");
-		return ret;
-	}
+		memcpy(sysimage+rem, priv->sys_img, HSE_SYS_IMG_MAX_SIZE);
+		ret = spi_flash_erase(qspi_flash, div * QSPI_BLOCK_SIZE, 2 * QSPI_BLOCK_SIZE);
+		if (ret) {
+			printf("ERROR: sys-img publish failed during erasing data!\n");
+			return ret;
+		}
+
+		ret = spi_flash_write(qspi_flash, div * QSPI_BLOCK_SIZE, 2 * QSPI_BLOCK_SIZE, (void *)sysimage);
+		if (ret) {
+			printf("ERROR: sys-img publish failed during writing data!\n");
+			return ret;
+		}
 
-	/* external flash type, flash page size */
-	priv->ivt.sys_img_ext_flash_type = HSE_EXT_FLASH_SD;
-	priv->ivt.sys_img_flash_page_size = HSE_EXT_FLASH_PAGE;
+		/* external flash type, flash page size */
+		priv->ivt.sys_img_ext_flash_type = HSE_EXT_FLASH_QSPI;
+		priv->ivt.sys_img_flash_page_size = HSE_EXT_FLASH_PAGE_QSPI;
+	} else {
+		sys_img_blk = priv->ivt.sys_img / 512;
+		sys_img_num_blks = HSE_SYS_IMG_MAX_SIZE / 512;
+
+		ret = hse_mmc_write(&priv->sys_img, sys_img_blk, sys_img_num_blks);
+		if (ret) {
+			printf("ERROR: sys-img publish failed during writing data!\n");
+			return ret;
+		}
+
+		/* external flash type, flash page size */
+		priv->ivt.sys_img_ext_flash_type = HSE_EXT_FLASH_SD;
+		priv->ivt.sys_img_flash_page_size = HSE_EXT_FLASH_PAGE;
+	}
 
 	/* set BOOT_SEQ bit, if using secure boot */
 	if (secure)
 		priv->ivt.boot_cfg |= HSE_IVT_BOOTSEQ_BIT;
 
 	/* write ivt */
-	ret = hse_mmc_write(&priv->ivt, HSE_IVT_BLK, 1);
-	if (ret) {
-		printf("ERROR: ivt write failed!\n");
-		return ret;
+	if (qspi_boot) {
+		ivtimage = buf;
+		ret = spi_flash_read(qspi_flash, HSE_IVT_QSPI_OFFSET,
+							QSPI_BLOCK_SIZE, (void *)ivtimage);
+		if (ret) {
+			printf("ERROR: ivt update failed during reading data!\n");
+			return ret;
+		}
+
+		ret = spi_flash_erase(qspi_flash, HSE_IVT_QSPI_OFFSET, QSPI_BLOCK_SIZE);
+		if (ret) {
+			printf("ERROR: ivt update failed during erasing data!\n");
+			return ret;
+		}
+
+		memcpy(ivtimage, &(priv->ivt), sizeof(priv->ivt));
+		ret = spi_flash_write(qspi_flash, HSE_IVT_QSPI_OFFSET, QSPI_BLOCK_SIZE, (void *)ivtimage);
+		if (ret) {
+			printf("ERROR: ivt update failed during writing data!\n");
+			return ret;
+		}
+	} else {
+		ret = hse_mmc_write(&priv->ivt, HSE_IVT_BLK, 1);
+		if (ret) {
+			printf("ERROR: ivt write failed!\n");
+			return ret;
+		}
 	}
 
 	return 0;
@@ -919,25 +1046,37 @@ int hse_enable_mus(struct hse_private *priv, u32 *recv_buf)
 	return 0;
 }
 
-static int get_ivt(struct hse_private *priv)
+static int get_ivt(struct hse_private *priv, bool qspi_boot)
 {
 	int ret = 0;
 
-	ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
+	if (qspi_boot)
+		ret = spi_flash_read(qspi_flash, HSE_IVT_QSPI_OFFSET,
+								sizeof(priv->ivt), (void *)&priv->ivt);
+	else
+		ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
 
 	return ret;
 }
 
-static int get_app_header(struct hse_private *priv)
+static int get_app_header(struct hse_private *priv, bool qspi_boot)
 {
 	int ret = 0;
 
 	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
-		ret = hse_mmc_read((void *)&priv->app_boot_hdr,
-				   (priv->ivt.app_boot / 512), 1);
+		if (qspi_boot )
+			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
+								sizeof(priv->app_boot_hdr), (void *)&priv->app_boot_hdr);
+		else
+			ret = hse_mmc_read((void *)&priv->app_boot_hdr,
+								(priv->ivt.app_boot / 512), 1);
 	} else {
-		ret = hse_mmc_read((void *)&priv->app_boot_hdr,
-				   (priv->ivt.autosar_image_off/ 512), 1);
+		if (qspi_boot )
+			ret = spi_flash_read(qspi_flash, priv->ivt.autosar_image_off,
+								sizeof(priv->app_boot_hdr), (void *)&priv->app_boot_hdr);
+		else
+			ret = hse_mmc_read((void *)&priv->app_boot_hdr,
+								 (priv->ivt.autosar_image_off/ 512), 1);
 	}
 
 	return ret;
@@ -972,6 +1111,34 @@ static int get_public_key(struct hse_private *priv, char *pubkey_file)
 	return ret;
 }
 
+static int setup_qspi_flash(struct spi_flash **flash)
+{
+#if CONFIG_IS_ENABLED(DM_SPI_FLASH)
+	struct udevice *new;
+	int	ret;
+
+	/* speed and mode will be read from DT */
+	ret = spi_flash_probe_bus_cs(CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS,
+				     CONFIG_SF_DEFAULT_SPEED, CONFIG_SF_DEFAULT_MODE,
+				     &new);
+	if (ret) {
+		printf("Failed to initialize QSPI flash at %u:%u (error %d)\n",
+				CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS, ret);
+		return ret;
+	}
+
+	*flash = dev_get_uclass_priv(new);
+#else
+	*flash = spi_flash_probe(CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS,
+				     CONFIG_SF_DEFAULT_SPEED, CONFIG_SF_DEFAULT_MODE);
+	if (!*flash) {
+		printf("Failed to initialize SPI flash at %u:%u\n",
+				CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS);
+		return -EIO;
+	}
+#endif
+	return 0;
+}
 
 static int do_hse_secboot_enable(struct cmd_tbl *cmdtp, int flag,
 				 int argc, char * const argv[])
@@ -982,6 +1149,7 @@ static int do_hse_secboot_enable(struct cmd_tbl *cmdtp, int flag,
 	u32 hse_recv;
 	u64 hse_resmem;
 	int hse_nodeoffset, ret;
+	bool qspi_boot = false;
 
 	/* check if hse has been initialised */
 	hse_status_ret = hse_mu_check_status();
@@ -990,14 +1158,23 @@ static int do_hse_secboot_enable(struct cmd_tbl *cmdtp, int flag,
 		return CMD_RET_FAILURE;
 	}
 
-	if (argc < 2 || !argv[1]) {
-		printf("USAGE: hse_secboot_enable <public_key_file>.der\n");
+	if (argc < 3 || !argv[2]) {
+		printf("USAGE: hse_secboot_enable <device> <public_key_file>.der\n");
 		printf("\n");
+		printf("    <device> - boot device: sd/qspi\n");
 		printf("    <public_key_file>.der - rsa public key in DER format\n");
 		printf("                            in the FAT partition\n");
 		return CMD_RET_FAILURE;
 	}
-	pubkey_file = argv[1];
+
+	if (!strcmp(argv[1], "qspi")) {
+		qspi_boot = true;
+		ret = setup_qspi_flash(&qspi_flash);
+		if (ret)
+			return ret;
+	}
+
+	pubkey_file = argv[2];
 
 	/* find mem reserved for hse */
 	hse_nodeoffset = fdt_node_offset_by_compatible(gd->fdt_blob, -1,
@@ -1017,21 +1194,21 @@ static int do_hse_secboot_enable(struct cmd_tbl *cmdtp, int flag,
 	memset((void *)priv, 0, sizeof(struct hse_private));
 
 	/* read ivt block */
-	ret = get_ivt(priv);
+	ret = get_ivt(priv, qspi_boot);
 	if (ret) {
 		printf("ERROR: ivt read failed!\n");
 		return ret;
 	}
 
 	/* read app boot code header */
-	ret = get_app_header(priv);
+	ret = get_app_header(priv, qspi_boot);
 	if (ret) {
 		printf("ERROR: app boot code header read failed!\n");
 		return ret;
 	}
 
 	/* get signature data */
-	ret = get_signature(priv);
+	ret = get_signature(priv, qspi_boot);
 	if (ret) {
 		printf("ERROR: get signature data failed!\n");
 		return ret;
@@ -1062,11 +1239,11 @@ static int do_hse_secboot_enable(struct cmd_tbl *cmdtp, int flag,
 	if (ret)
 		return ret;
 
-	ret = hse_install_smr_entries(priv, &hse_recv);
+	ret = hse_install_smr_entries(priv, &hse_recv, qspi_boot);
 	if (ret)
 		return ret;
 
-	ret = hse_install_cr_entries(priv, &hse_recv);
+	ret = hse_install_cr_entries(priv, &hse_recv, qspi_boot);
 	if (ret)
 		return ret;
 
@@ -1074,14 +1251,14 @@ static int do_hse_secboot_enable(struct cmd_tbl *cmdtp, int flag,
 	if (ret) 
 		return ret;
 
-	ret = hse_write_sys_img(priv, true);
+	ret = hse_write_sys_img(priv, true, qspi_boot);
 	if (ret) 
 		return ret;
 
 	return CMD_RET_SUCCESS;
 }
 
-U_BOOT_CMD(hse_secboot_enable, 2, 0, do_hse_secboot_enable,
+U_BOOT_CMD(hse_secboot_enable, 3, 0, do_hse_secboot_enable,
 	   "generate device-specific SYS_IMG",
 	   "Generate SYS-IMG and place it on SD card");
 
@@ -1093,6 +1270,21 @@ static int do_hse_keystore_format(struct cmd_tbl *cmdtp, int flag,
 	u32 hse_recv;
 	u64 hse_resmem;
 	int hse_nodeoffset, ret;
+	bool qspi_boot = false;
+
+	if (argc < 2) {
+		printf("USAGE: hse_secboot_enable <device>\n");
+		printf("\n");
+		printf("    <device> - boot device: sd/qspi\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (!strcmp(argv[1], "qspi")) {
+		qspi_boot = true;
+		ret = setup_qspi_flash(&qspi_flash);
+		if (ret)
+			return ret;
+	}
 
 	/* check if hse has been initialised */
 	hse_status_ret = hse_mu_check_status();
@@ -1125,7 +1317,11 @@ static int do_hse_keystore_format(struct cmd_tbl *cmdtp, int flag,
 	memset((void *)priv, 0, sizeof(struct hse_private));
 
 	/* read ivt */
-	ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
+	if (qspi_boot)
+		ret = spi_flash_read(qspi_flash, HSE_IVT_QSPI_OFFSET,
+								sizeof(priv->ivt), (void *)&priv->ivt);
+	else
+		ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
 	if (ret) {
 		printf("ERROR: ivt read failed!\n");
 		return ret;
@@ -1143,14 +1339,14 @@ static int do_hse_keystore_format(struct cmd_tbl *cmdtp, int flag,
 	if (ret)
 		return ret;
 
-	ret = hse_write_sys_img(priv, false);
+	ret = hse_write_sys_img(priv, false, qspi_boot);
 	if (ret)
 		return ret;
 
 	return CMD_RET_SUCCESS;
 }
 
-U_BOOT_CMD(hse_keystore_format, 1, 0, do_hse_keystore_format,
+U_BOOT_CMD(hse_keystore_format, 2, 0, do_hse_keystore_format,
 	   "format the keystore",
 	   "Format keystore for use in Linux kernel driver");
 
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index aa5116b31a..15a0d3997c 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -32,9 +32,15 @@
 #define HSE_AUTH_TAG_OFFSET  0x200u
 
 #define HSE_IVT_BLK      8
+#define HSE_IVT_QSPI_OFFSET 0x0
+
 
 #define HSE_EXT_FLASH_SD   2u
 #define HSE_EXT_FLASH_PAGE 512u
+#define HSE_EXT_FLASH_QSPI 0u
+#define HSE_EXT_FLASH_PAGE_QSPI	0x1000u
+
+#define QSPI_BLOCK_SIZE 0x10000u
 
 #define HSE_CHANNEL_ADMIN   0u
 #define HSE_CHANNEL_GENERAL 1u
@@ -61,6 +67,7 @@
 
 #define HSE_SGT_OPTION_NONE 0u
 
+#define HSE_SMR_CFG_FLAG_QSPI_FLASH 0x0u
 #define HSE_SMR_CFG_FLAG_SD_FLASH     0x2u
 #define HSE_SMR_CFG_FLAG_INSTALL_AUTH BIT(2)
 #define HSE_SMR_ENTRY_1               BIT(1)
-- 
2.34.1

