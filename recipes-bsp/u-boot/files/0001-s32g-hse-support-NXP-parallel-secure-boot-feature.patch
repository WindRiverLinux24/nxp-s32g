From 15b10b8a1933d72351e2afaef346376959f152f0 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Wed, 29 Mar 2023 17:29:33 +0800
Subject: [PATCH] s32g: hse: support NXP parallel secure boot feature

The major improvements of supporting NXP parallel secure boot
is to install reset core entry for M7 image

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 36 ++++++++++++++++++++--
 include/hse/hse_abi.h                      |  4 ++-
 2 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index a7911206..4a144d9d 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -93,6 +93,7 @@ static u32 get_fip_start(struct hse_private *priv)
 			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET;
 			break;
 		case NXP_M7_SEC_BOOT:
+		case NXP_PARALLEL_SEC_BOOT:
 			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
 			break;
 		default:
@@ -114,6 +115,7 @@ static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
 			break;
 		case NXP_M7_SEC_BOOT:
+		case NXP_PARALLEL_SEC_BOOT:
 			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
 			break;
 		default:
@@ -175,6 +177,7 @@ static uintptr_t get_m7_sign_data(struct hse_private *priv)
 
 	switch (priv->ivt.boot_type) {
 		case NXP_M7_SEC_BOOT:
+		case NXP_PARALLEL_SEC_BOOT:
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
 						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
 			break;
@@ -207,6 +210,7 @@ static uintptr_t get_fip_sign_data(struct hse_private *priv)
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET + sign_offset;
 			break;
 		case NXP_M7_SEC_BOOT:
+		case NXP_PARALLEL_SEC_BOOT:
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
 						M7_BOOT_CODE_SIZE + sign_offset;
 			break;
@@ -349,6 +353,12 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 		case NXP_SEC_BOOT:
 			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1;
 			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
+			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
+			break;
+		case NXP_PARALLEL_SEC_BOOT:
+			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_2;
+			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
+			priv->srv_desc.cr_install_req.cr_entry_index = 2u;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
@@ -366,7 +376,6 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	priv->cr_entry.start_option = HSE_CR_AUTO_START;
 
 	priv->srv_desc.srv_id = HSE_SRV_ID_CORE_RESET_ENTRY_INSTALL;
-	priv->srv_desc.cr_install_req.cr_entry_index = 1u;
 	priv->srv_desc.cr_install_req.cr_entry_addr =
 					(uintptr_t)&priv->cr_entry;
 
@@ -393,6 +402,11 @@ int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
 			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
 			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
 			break;
+		case NXP_PARALLEL_SEC_BOOT:
+			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1;
+			priv->cr_entry.pass_reset = priv->ivt.m7_image_entry_bak;
+			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
@@ -419,7 +433,8 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 {
 	int ret = 0;
 
-	if (priv->ivt.boot_type == NXP_SEC_BOOT) {
+	if (priv->ivt.boot_type == NXP_SEC_BOOT ||
+		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT) {
 		ret = hse_install_fip_cr_entry(priv, recv_buf);
 		if (ret) {
 			printf("ERROR: fip core reset entry install failed!\n");
@@ -427,7 +442,8 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 		}
 	}
 
-	if (priv->ivt.boot_type == NXP_M7_SEC_BOOT) {
+	if (priv->ivt.boot_type == NXP_M7_SEC_BOOT ||
+		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT) {
 		ret = hse_install_m7_cr_entry(priv, recv_buf);
 		if (ret) {
 			printf("ERROR: m7 core reset entry install failed!\n");
@@ -492,6 +508,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_install_req->entry_index = 1u;
 			break;
 		case NXP_M7_SEC_BOOT:
+		case NXP_PARALLEL_SEC_BOOT:
 			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
 			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load + M7_BOOT_CODE_SIZE;
 			smr_entry->auth_tag = get_fip_sign_mmc(priv);
@@ -563,6 +580,19 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_entry;
 			smr_entry->auth_tag = get_m7_sign_mmc(priv);
 
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
+			smr_install_req->smr_data_len = m7_size;
+			break;
+		case NXP_PARALLEL_SEC_BOOT:
+			/*
+			  *  For M7 code, it must align with 128 byte in ram,
+			  *  so get the diff between load address and entry address
+			  */
+			align_diff = priv->ivt.m7_image_entry_bak - priv->app_boot_hdr.ram_load;
+			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
+			smr_entry->smr_dst_addr = priv->ivt.m7_image_entry_bak;
+			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
 			smr_install_req->smr_data_len = m7_size;
 			break;
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index cc5d1b7e..76850b0d 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -200,7 +200,8 @@ struct ivt {
 	/* pad to block size - 512 bytes */
 	u32 boot_type;
 	u32 m7_image_size;
-	u8 reserved4[248];
+	u32 m7_image_entry_bak;
+	u8 reserved4[244];
 } __packed;
 
 /**
@@ -494,6 +495,7 @@ enum boot_type {
 	NON_SEC_BOOT = 0,
 	NXP_SEC_BOOT,
 	NXP_M7_SEC_BOOT,
+	NXP_PARALLEL_SEC_BOOT,
 };
 
 
-- 
2.34.1

