From ba3bee1177e411f1dbe52ba62e0364084ed0df30 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Thu, 30 Mar 2023 15:43:34 +0800
Subject: [PATCH] s32g: hse: support Aptiv autosar secure boot feature

The major improvements of supporting Aptiv autosar secure boot
is to install autosar SMR(secure memory region) and reset core entry
for autosar image.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 147 +++++++++++++++++----
 include/hse/hse_abi.h                      |   4 +-
 2 files changed, 127 insertions(+), 24 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index 4a144d9d..02483379 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -96,6 +96,9 @@ static u32 get_fip_start(struct hse_private *priv)
 		case NXP_PARALLEL_SEC_BOOT:
 			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
 			break;
+		case APTIV_AUTOSAR_SEC_BOOT:
+			fip_start = priv->ivt.fip_image_off + APP_CODE_OFFSET;
+			break;
 		default:
 			printf("ERROR: invalid fip start offset!\n");
 			break;
@@ -112,6 +115,7 @@ static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 
 	switch (priv->ivt.boot_type) {
 		case NXP_SEC_BOOT:
+		case APTIV_AUTOSAR_SEC_BOOT:
 			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
 			break;
 		case NXP_M7_SEC_BOOT:
@@ -153,7 +157,23 @@ static u64 get_fip_sign_offset(struct hse_private *priv)
 
 static u32 get_m7_sign_mmc(struct hse_private *priv)
 {
-	return get_m7_start(priv) + M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
+	u32 m7_sign_off = 0;
+
+	switch (priv->ivt.boot_type) {
+		case NXP_SEC_BOOT:
+		case NXP_M7_SEC_BOOT:
+		case NXP_PARALLEL_SEC_BOOT:
+			m7_sign_off = get_m7_start(priv) + M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
+			break;
+		case APTIV_AUTOSAR_SEC_BOOT:
+			m7_sign_off = get_m7_start(priv) + priv->app_boot_hdr.code_len;
+			break;
+		default:
+		printf("ERROR: invalid fip start offset!\n");
+		break;
+	}
+
+	return m7_sign_off;
 }
 
 static u32 get_fip_sign_mmc(struct hse_private *priv)
@@ -167,20 +187,34 @@ static u32 get_fip_sign_mmc(struct hse_private *priv)
 	return get_fip_start(priv) + sign_offset;
 }
 
-static uintptr_t get_m7_sign_data(struct hse_private *priv)
+static int get_m7_sign_data(struct hse_private *priv)
 {
 	u64 sign_addr;
+	int ret = 0;
 
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-			 (priv->app_boot_hdr.code_len / 512) + 1);
 
 	switch (priv->ivt.boot_type) {
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
+			hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+									 (priv->app_boot_hdr.code_len / 512) + 1);
+			if (ret) {
+				printf("ERROR: M7 signature read failed!\n");
+				return ret;
+			}
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
 						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
 			break;
+		case APTIV_AUTOSAR_SEC_BOOT:
+			hse_mmc_read((void *)priv->buf_space,
+								 ((priv->ivt.app_boot + priv->app_boot_hdr.code_len)/ 512), 1);
+			if (ret) {
+				printf("ERROR: M7 signature read failed!\n");
+				return ret;
+			}
+			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
@@ -191,18 +225,41 @@ static uintptr_t get_m7_sign_data(struct hse_private *priv)
 	return 0;
 }
 
-static uintptr_t get_fip_sign_data(struct hse_private *priv)
+static int get_fip_sign_data(struct hse_private *priv)
 {
 	uintptr_t sign_offset;
 	u64 sign_addr;
+	u32 fip_size;
+	u32 fip_sig_blk_off;
+	u32 fip_sig_off;
+	int ret = 0;
 
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-			 (priv->app_boot_hdr.code_len / 512) + 1);
-	sign_offset = (uintptr_t)get_fip_sign_offset(priv);
-	if (!sign_offset) {
-		printf("ERROR: FIP signature read failed!\n");
-		return -ENOMEM;
+
+	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
+		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+							 (priv->app_boot_hdr.code_len / 512) + 1);
+		if (ret) {
+				printf("ERROR: FIP signature read failed!\n");
+				return ret;
+		}
+		sign_offset = (uintptr_t)get_fip_sign_offset(priv);
+		if (!sign_offset) {
+			printf("ERROR: FIP signature read failed!\n");
+			return -ENOMEM;
+		}
+	} else {
+		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
+						sizeof(priv->buf_space) / 512);
+		if (ret) {
+			printf("ERROR: FIP signature read failed!\n");
+			return ret;
+		}
+		fip_size = get_fip_size(priv);
+		if (!fip_size) {
+			printf("ERROR:	FIP signature read size!\n");
+			return -ENOMEM;
+		}
 	}
 
 	switch (priv->ivt.boot_type) {
@@ -214,6 +271,16 @@ static uintptr_t get_fip_sign_data(struct hse_private *priv)
 			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
 						M7_BOOT_CODE_SIZE + sign_offset;
 			break;
+		case APTIV_AUTOSAR_SEC_BOOT:
+			fip_sig_blk_off = (priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size) /512;
+			fip_sig_off = (priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size) %512;
+			ret = hse_mmc_read((void *)priv->buf_space, fip_sig_blk_off, 2);
+			if (ret) {
+				printf("ERROR: FIP signature read failed!\n");
+				return ret;
+			}
+			sign_addr = (u64)priv->buf_space + fip_sig_off;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
@@ -398,6 +465,7 @@ int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	switch (priv->ivt.boot_type) {
 		case NXP_M7_SEC_BOOT:
+		case APTIV_AUTOSAR_SEC_BOOT:
 			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1 | HSE_SMR_ENTRY_2;
 			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
 			priv->srv_desc.cr_install_req.cr_entry_index = 1u;
@@ -443,7 +511,8 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 	}
 
 	if (priv->ivt.boot_type == NXP_M7_SEC_BOOT ||
-		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT) {
+		priv->ivt.boot_type == NXP_PARALLEL_SEC_BOOT ||
+		priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT) {
 		ret = hse_install_m7_cr_entry(priv, recv_buf);
 		if (ret) {
 			printf("ERROR: m7 core reset entry install failed!\n");
@@ -488,8 +557,18 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-				 (priv->app_boot_hdr.code_len / 512) + 1);
+	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
+		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+								(priv->app_boot_hdr.code_len / 512) + 1);
+	} else {
+		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
+								sizeof(priv->buf_space) / 512);
+	}
+
+	if (ret) {
+			printf("ERROR: fip code read failed!\n");
+			return ret;
+	}
 
 	fip_size = get_fip_size(priv);
 	if (!fip_size) {
@@ -501,6 +580,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 		case NXP_SEC_BOOT:
 			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET;
 			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_entry->smr_size = fip_size - HSE_FIP_AUTH_LEN;
 			smr_entry->auth_tag = get_fip_sign_mmc(priv);
 
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
@@ -511,18 +591,28 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 		case NXP_PARALLEL_SEC_BOOT:
 			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
 			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load + M7_BOOT_CODE_SIZE;
+			smr_entry->smr_size = fip_size - HSE_FIP_AUTH_LEN;
 			smr_entry->auth_tag = get_fip_sign_mmc(priv);
 
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE);
 			smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
 			smr_install_req->entry_index = 2u;
 			break;
+		case APTIV_AUTOSAR_SEC_BOOT:
+			smr_entry->smr_src =  priv->ivt.fip_image_off + APP_CODE_OFFSET;
+			smr_entry->smr_dst_addr =((struct app_boot_hdr *)priv->buf_space)->ram_load;
+			smr_entry->smr_size = fip_size;
+			smr_entry->auth_tag = priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size;
+
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
+			smr_install_req->smr_data_len = fip_size;
+			smr_install_req->entry_index = 2u;
+			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
 	}
 
-	smr_entry->smr_size = fip_size - HSE_FIP_AUTH_LEN;
 	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
 				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
 	smr_entry->check_period = 0;
@@ -551,7 +641,6 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 {
 	struct hse_smr_entry *smr_entry;
 	struct hse_smr_install_srv *smr_install_req;
-	u32 m7_size;
 	u32 align_diff;
 	int ret = 0;
 
@@ -564,10 +653,12 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-				 (priv->app_boot_hdr.code_len / 512) + 1);
-
-	m7_size = priv->ivt.m7_image_size;
+	ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+								 (priv->app_boot_hdr.code_len / 512) + 1);
+	if (ret) {
+		printf("ERROR: m7 code read failed!\n");
+		return ret;
+	}
 
 	switch (priv->ivt.boot_type) {
 		case NXP_M7_SEC_BOOT:
@@ -578,10 +669,11 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			align_diff = priv->app_boot_hdr.ram_entry - priv->app_boot_hdr.ram_load;
 			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
 			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_entry;
+			smr_entry->smr_size = priv->ivt.m7_image_size;
 			smr_entry->auth_tag = get_m7_sign_mmc(priv);
 
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
-			smr_install_req->smr_data_len = m7_size;
+			smr_install_req->smr_data_len = priv->ivt.m7_image_size;
 			break;
 		case NXP_PARALLEL_SEC_BOOT:
 			/*
@@ -591,17 +683,26 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			align_diff = priv->ivt.m7_image_entry_bak - priv->app_boot_hdr.ram_load;
 			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
 			smr_entry->smr_dst_addr = priv->ivt.m7_image_entry_bak;
+			smr_entry->smr_size = priv->ivt.m7_image_size;
 			smr_entry->auth_tag = get_m7_sign_mmc(priv);
 
 			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
-			smr_install_req->smr_data_len = m7_size;
+			smr_install_req->smr_data_len = priv->ivt.m7_image_size;
+			break;
+		case APTIV_AUTOSAR_SEC_BOOT:
+			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET;
+			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_entry->smr_size = priv->app_boot_hdr.code_len;
+			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
+			smr_install_req->smr_data_len = priv->app_boot_hdr.code_len;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
 	}
 
-	smr_entry->smr_size = m7_size;
 	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
 				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
 	smr_entry->check_period = 0;
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index 76850b0d..c7075694 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -201,7 +201,8 @@ struct ivt {
 	u32 boot_type;
 	u32 m7_image_size;
 	u32 m7_image_entry_bak;
-	u8 reserved4[244];
+	u32 fip_image_off;
+	u8 reserved4[240];
 } __packed;
 
 /**
@@ -496,6 +497,7 @@ enum boot_type {
 	NXP_SEC_BOOT,
 	NXP_M7_SEC_BOOT,
 	NXP_PARALLEL_SEC_BOOT,
+	APTIV_AUTOSAR_SEC_BOOT,
 };
 
 
-- 
2.34.1

