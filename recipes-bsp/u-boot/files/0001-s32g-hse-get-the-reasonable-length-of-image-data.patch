From 367ea2b84bc87bb6aba65f4e3887501183e71106 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Fri, 15 Dec 2023 14:17:49 +0800
Subject: [PATCH] s32g: hse: get the reasonable length of image data

When upgrading nxp-s32g BSP to NXP SDK BSP39, there are more internal
SRAM regions used. In this way, if the whole fip.bin image is stilled loaded
into internal SRAM for secure boot feature, there is a confliction occurring,
and bootloader is not able to boot normally. Therefore, refer to the design
of non-secure boot, only load bl2 into internal SRAM, and then load other
images from sd card into DDR memory. Based on this design, it needs to
improve the secure boot enable function by geting the reasonable length
of images, so that that are able to be verified with signature data normally.

Upstream-Status: Inappropriate [WR Linux specific]

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index e2a984e79f..a84ff08185 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -214,7 +214,7 @@ static int get_m7_sign_data(struct hse_private *priv)
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
 			hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-									 (priv->app_boot_hdr.code_len / 512) + 1);
+									 sizeof(priv->buf_space) / 512);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
@@ -263,7 +263,7 @@ static int get_fip_sign_data(struct hse_private *priv)
 
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
 		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-							 (priv->app_boot_hdr.code_len / 512) + 1);
+							sizeof(priv->buf_space) / 512);
 		if (ret) {
 				printf("ERROR: FIP signature read failed!\n");
 				return ret;
@@ -625,7 +625,7 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
 		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-								(priv->app_boot_hdr.code_len / 512) + 1);
+								sizeof(priv->buf_space) / 512);
 	} else {
 		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
 								sizeof(priv->buf_space) / 512);
@@ -702,12 +702,16 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
+	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
 		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-									 (priv->app_boot_hdr.code_len / 512) + 1);
+									sizeof(priv->buf_space) / 512);
 	} else {
-		ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.autosar_image_off / 512,
-									 (priv->app_boot_hdr.code_len / 512) + 1);
+		if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+										(priv->app_boot_hdr.code_len / 512) + 1);
+		else
+			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.autosar_image_off / 512,
+										 (priv->app_boot_hdr.code_len / 512) + 1);
 	}
 	if (ret) {
 		printf("ERROR: m7 code read failed!\n");
-- 
2.34.1

