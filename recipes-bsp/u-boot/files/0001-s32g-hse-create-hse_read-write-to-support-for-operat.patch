From 5cf9697f544543cc892ef359521d4646421df5f7 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Sun, 14 Jan 2024 13:05:33 +0800
Subject: [PATCH] s32g: hse: create hse_read/write() to support for operating
 both sd and flash device

Create hse_read/write() finction to operate both sd and flash
device simply, so that avoid making lots of branch cases.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 327 +++++++++++----------
 include/hse/hse_abi.h                      |   1 +
 2 files changed, 176 insertions(+), 152 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index c70fa9cbe8..1e0483ff96 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -82,6 +82,66 @@ static struct hse_smr_dynamic_config smr_dynamic_config;
 
 static struct spi_flash *qspi_flash;
 
+static int hse_read(u32 offset, size_t len, void *buf, bool qspi_boot)
+{
+	int ret = 0;
+
+	if (qspi_boot)
+		ret = spi_flash_read(qspi_flash, offset, len, buf);
+	else
+		ret = hse_mmc_read(buf, offset/SD_SECTOR_SIZE, len/SD_SECTOR_SIZE);
+
+	return ret;
+}
+
+static int hse_write(u32 offset, size_t len, const char *buf, bool qspi_boot)
+{
+	int ret = 0;
+	uint32_t rem, div;
+	uint8_t tmp[2 * QSPI_BLOCK_SIZE];
+	const char *end = buf + len;
+	size_t todo;
+
+	if (qspi_boot) {
+		if (offset + len  > qspi_flash->size) {
+			printf("ERROR: hse_write failed because of exceeding flash end !\n");
+			return -1;
+		}
+
+		for (; buf < end && !ret; buf += todo, offset += todo) {
+			// Reading max 2 blocks, as data offset may be present at the end of QSPI block
+			div = offset / QSPI_BLOCK_SIZE;
+			rem = offset % QSPI_BLOCK_SIZE;
+			todo = min_t(size_t, end - buf, 2 * QSPI_BLOCK_SIZE);
+			if( todo == 2 * QSPI_BLOCK_SIZE )
+				todo -=  rem;
+			ret = spi_flash_read(qspi_flash, div * QSPI_BLOCK_SIZE,
+										2 * QSPI_BLOCK_SIZE, tmp);
+			if (ret) {
+				printf("ERROR: hse_write failed during reading flash data!\n");
+				return ret;
+			}
+
+			ret = spi_flash_erase(qspi_flash, div * QSPI_BLOCK_SIZE, 2 * QSPI_BLOCK_SIZE);
+			if (ret) {
+				printf("ERROR: hse_write failed during erasing flash data!\n");
+				return ret;
+			}
+
+			memcpy(tmp + rem, buf, todo);
+			ret = spi_flash_write(qspi_flash, div * QSPI_BLOCK_SIZE, 2 * QSPI_BLOCK_SIZE, (void *)tmp);
+			if (ret) {
+				printf("ERROR: hse_write failed during writing flash data!\n");
+				return ret;
+			}
+		}
+	} else {
+		ret = hse_mmc_write(buf, offset/SD_SECTOR_SIZE, len/SD_SECTOR_SIZE);
+	}
+
+	return ret;
+}
+
 /* return 0 for equal uuids */
 static inline int compare_uuids(const struct uuid *uuid1,
 				const struct uuid *uuid2)
@@ -213,18 +273,17 @@ static int get_m7_sign_data(struct hse_private *priv, bool qspi_boot)
 {
 	u64 sign_addr;
 	int ret = 0;
+	u32 offset;
+	size_t length;
 
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
 
 	switch (priv->ivt.boot_type) {
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
-			if (qspi_boot)
-				ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
-									sizeof(priv->buf_space), (void *)&priv->buf_space);
-			else
-				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-										 sizeof(priv->buf_space) / 512);
+			offset = priv->ivt.app_boot;
+			length = sizeof(priv->buf_space);
+			ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
@@ -233,34 +292,40 @@ static int get_m7_sign_data(struct hse_private *priv, bool qspi_boot)
 						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE; 
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
-			if (qspi_boot)
-				ret = spi_flash_read(qspi_flash,
-									priv->ivt.app_boot + APP_CODE_OFFSET + priv->app_boot_hdr.code_len,
-									M7_SIGNATURE_SIZE, (void *)&priv->buf_space);
-			else
-				ret = hse_mmc_read((void *)priv->buf_space,
-									 ((priv->ivt.app_boot + priv->app_boot_hdr.code_len)/ 512), 1);
+			if (qspi_boot) {
+				offset = priv->ivt.app_boot + APP_CODE_OFFSET + priv->app_boot_hdr.code_len;
+				length = M7_SIGNATURE_SIZE;
+			} else {
+				offset = priv->ivt.app_boot + priv->app_boot_hdr.code_len;
+				length = SD_SECTOR_SIZE;
+			}
+
+			ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
+
 			if (qspi_boot)
 				sign_addr = (uintptr_t)priv->buf_space;
 			else
 				sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			break;
 		case APTIV_PARALLEL_SEC_BOOT:
-			if (qspi_boot)
-				ret = spi_flash_read(qspi_flash,
-									priv->ivt.autosar_image_off + APP_CODE_OFFSET + priv->app_boot_hdr.code_len,
-									M7_SIGNATURE_SIZE, (void *)&priv->buf_space);
-			else
-				ret = hse_mmc_read((void *)priv->buf_space,
-									 ((priv->ivt.autosar_image_off + priv->app_boot_hdr.code_len)/ 512), 1);
+			if (qspi_boot) {
+				offset = priv->ivt.autosar_image_off + APP_CODE_OFFSET + priv->app_boot_hdr.code_len;
+				length = M7_SIGNATURE_SIZE;
+			} else {
+				offset = priv->ivt.autosar_image_off + priv->app_boot_hdr.code_len;
+				length = SD_SECTOR_SIZE;
+			}
+
+			ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 			if (ret) {
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
+
 			if (qspi_boot)
 				sign_addr = (uintptr_t)priv->buf_space;
 			else
@@ -282,36 +347,34 @@ static int get_fip_sign_data(struct hse_private *priv, bool qspi_boot)
 	u64 sign_addr;
 	u32 fip_size = 0;
 	int ret = 0;
+	u32 offset;
+	size_t length;
 
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
 
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
-		if (qspi_boot)
-			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
-								sizeof(priv->buf_space), (void *)&priv->buf_space);
-		else
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-								sizeof(priv->buf_space) / 512);
+		offset = priv->ivt.app_boot;
+		length = sizeof(priv->buf_space);
+		ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 		if (ret) {
 				printf("ERROR: FIP signature read failed!\n");
 				return ret;
 		}
+
 		sign_offset = (uintptr_t)get_fip_sign_offset(priv);
 		if (!sign_offset) {
 			printf("ERROR: FIP signature read failed!\n");
 			return -ENOMEM;
 		}
 	} else {
-		if (qspi_boot)
-			ret = spi_flash_read(qspi_flash, priv->ivt.fip_image_off,
-								sizeof(priv->buf_space), (void *)&priv->buf_space);
-		else
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
-							sizeof(priv->buf_space) / 512);
+		offset = priv->ivt.fip_image_off;
+		length = sizeof(priv->buf_space);
+		ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 		if (ret) {
 			printf("ERROR: FIP signature read failed!\n");
 			return ret;
 		}
+
 		fip_size = get_fip_size(priv);
 		if (!fip_size) {
 			printf("ERROR: FIP signature read size!\n");
@@ -462,6 +525,8 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_boot)
 {
 	int ret;
+	u32 offset;
+	size_t length;
 
 	printf("\tGenerating Fip Core Reset Entry...\n");
 	memset((void *)&priv->cr_entry, 0, sizeof(struct hse_cr_entry));
@@ -480,11 +545,12 @@ int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_
 			break;
 		case APTIV_PARALLEL_SEC_BOOT:
 			memset((void *)(uintptr_t)priv->buf_space, 0, sizeof(priv->buf_space));
+			offset = priv->ivt.fip_image_off;
 			if (qspi_boot)
-				ret = spi_flash_read(qspi_flash, priv->ivt.fip_image_off,
-										sizeof(struct app_boot_hdr), (void *)&priv->buf_space);
+				length = sizeof(struct app_boot_hdr);
 			else
-				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512, 1);
+				length = SD_SECTOR_SIZE;
+			ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 			if (ret) {
 				printf("ERROR: FIP boot app header read failed!\n");
 				return ret;
@@ -650,28 +716,22 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi
 {
 	u32 fip_size;
 	int ret = 0;
+	u32 offset;
+	size_t length;
 
 	printf("\tGenerating Fip Secure Memory Region entry...\n");
 	memset((void *)&smr_dynamic_config, 0, sizeof(struct hse_smr_dynamic_config));
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
-	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
-		if (qspi_boot)
-			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
-							sizeof(priv->buf_space), (void *)&priv->buf_space);
-		else
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-								sizeof(priv->buf_space) / 512);
-	} else {
-		if (qspi_boot)
-			ret = spi_flash_read(qspi_flash, priv->ivt.fip_image_off,
-							sizeof(priv->buf_space), (void *)&priv->buf_space);
-		else
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.fip_image_off / 512,
-									sizeof(priv->buf_space) / 512);
-	}
 
+	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT)
+		offset =  priv->ivt.app_boot;
+	else
+		offset =  priv->ivt.fip_image_off;
+	length = sizeof(priv->buf_space);
+
+	ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 	if (ret) {
 			printf("ERROR: fip code read failed!\n");
 			return ret;
@@ -737,36 +797,31 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf, bool qspi_
 {
 	u32 align_diff;
 	int ret = 0;
+	u32 offset;
+	size_t length;
 
 	printf("\tGenerating M7 Secure Memory Region entry...\n");
 	memset((void *)&smr_dynamic_config, 0, sizeof(struct hse_smr_dynamic_config));
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
+
 	if (priv->ivt.boot_type < APTIV_AUTOSAR_SEC_BOOT) {
-		if (qspi_boot)
-			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
-							sizeof(priv->buf_space), (void *)&priv->buf_space);
-		else
-			ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-										sizeof(priv->buf_space) / 512);
+		offset = priv->ivt.app_boot;
+		length = sizeof(priv->buf_space);
 	} else {
+		if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
+			offset = priv->ivt.app_boot;
+		else
+			offset = priv->ivt.autosar_image_off;
 		if (qspi_boot) {
-			if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
-				ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
-							priv->app_boot_hdr.code_len + APP_CODE_OFFSET, (void *)&priv->buf_space);
-			else
-				ret = spi_flash_read(qspi_flash, priv->ivt.autosar_image_off,
-							priv->app_boot_hdr.code_len + APP_CODE_OFFSET, (void *)&priv->buf_space);
+			length = priv->app_boot_hdr.code_len + APP_CODE_OFFSET;
 		} else {
-			if (priv->ivt.boot_type == APTIV_AUTOSAR_SEC_BOOT)
-				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
-											(priv->app_boot_hdr.code_len / 512) + 1);
-			else
-				ret = hse_mmc_read((void *)priv->buf_space, priv->ivt.autosar_image_off / 512,
-											 (priv->app_boot_hdr.code_len / 512) + 1);
+			length = priv->app_boot_hdr.code_len + SD_SECTOR_SIZE;
 		}
 	}
+
+	ret = hse_read(offset, length, (void *)&priv->buf_space, qspi_boot);
 	if (ret) {
 		printf("ERROR: m7 code read failed!\n");
 		return ret;
@@ -911,54 +966,27 @@ static ulong bytes_per_second(unsigned int len, ulong start_ms)
 int hse_write_sys_img(struct hse_private *priv, bool secure, bool qspi_boot)
 {
 	int ret;
-	u32 sys_img_blk, sys_img_num_blks;
-	uint8_t buf[2 * QSPI_BLOCK_SIZE];
-	uint8_t *sysimage, *ivtimage;
-	uint32_t rem, div;
+	u32 offset;
+	size_t length;
 
 	printf("\tPublishing SYS_IMG...\n");
 
 	flush_dcache_range((u64)priv,
 			   (u64)priv + sizeof(struct hse_private));
 
-	if (qspi_boot) {
-		sysimage = buf;
-		// Reading max 2 blocks, as SYSIMG Offset may be present at the end of QSPI block
-		div = priv->ivt.sys_img / QSPI_BLOCK_SIZE;
-		rem = priv->ivt.sys_img % QSPI_BLOCK_SIZE;
-		ret = spi_flash_read(qspi_flash, div * QSPI_BLOCK_SIZE,
-							2 * QSPI_BLOCK_SIZE, (void *)sysimage);
-		if (ret) {
-			printf("ERROR: sys-img publish failed during reading data!\n");
-			return ret;
-		}
-
-		memcpy(sysimage+rem, priv->sys_img, HSE_SYS_IMG_MAX_SIZE);
-		ret = spi_flash_erase(qspi_flash, div * QSPI_BLOCK_SIZE, 2 * QSPI_BLOCK_SIZE);
-		if (ret) {
-			printf("ERROR: sys-img publish failed during erasing data!\n");
-			return ret;
-		}
-
-		ret = spi_flash_write(qspi_flash, div * QSPI_BLOCK_SIZE, 2 * QSPI_BLOCK_SIZE, (void *)sysimage);
-		if (ret) {
-			printf("ERROR: sys-img publish failed during writing data!\n");
-			return ret;
-		}
+	offset = priv->ivt.sys_img;
+	length = HSE_SYS_IMG_MAX_SIZE;
+	ret = hse_write(offset, length, (char *)&priv->sys_img, qspi_boot);
+	if (ret) {
+		printf("ERROR: sys-img publish failed during writing data!\n");
+		return ret;
+	}
 
+	if (qspi_boot) {
 		/* external flash type, flash page size */
 		priv->ivt.sys_img_ext_flash_type = HSE_EXT_FLASH_QSPI;
 		priv->ivt.sys_img_flash_page_size = HSE_EXT_FLASH_PAGE_QSPI;
 	} else {
-		sys_img_blk = priv->ivt.sys_img / 512;
-		sys_img_num_blks = HSE_SYS_IMG_MAX_SIZE / 512;
-
-		ret = hse_mmc_write(&priv->sys_img, sys_img_blk, sys_img_num_blks);
-		if (ret) {
-			printf("ERROR: sys-img publish failed during writing data!\n");
-			return ret;
-		}
-
 		/* external flash type, flash page size */
 		priv->ivt.sys_img_ext_flash_type = HSE_EXT_FLASH_SD;
 		priv->ivt.sys_img_flash_page_size = HSE_EXT_FLASH_PAGE;
@@ -970,32 +998,16 @@ int hse_write_sys_img(struct hse_private *priv, bool secure, bool qspi_boot)
 
 	/* write ivt */
 	if (qspi_boot) {
-		ivtimage = buf;
-		ret = spi_flash_read(qspi_flash, HSE_IVT_QSPI_OFFSET,
-							QSPI_BLOCK_SIZE, (void *)ivtimage);
-		if (ret) {
-			printf("ERROR: ivt update failed during reading data!\n");
-			return ret;
-		}
-
-		ret = spi_flash_erase(qspi_flash, HSE_IVT_QSPI_OFFSET, QSPI_BLOCK_SIZE);
-		if (ret) {
-			printf("ERROR: ivt update failed during erasing data!\n");
-			return ret;
-		}
-
-		memcpy(ivtimage, &(priv->ivt), sizeof(priv->ivt));
-		ret = spi_flash_write(qspi_flash, HSE_IVT_QSPI_OFFSET, QSPI_BLOCK_SIZE, (void *)ivtimage);
-		if (ret) {
-			printf("ERROR: ivt update failed during writing data!\n");
-			return ret;
-		}
+		offset = HSE_IVT_QSPI_OFFSET;
+		length = sizeof(priv->ivt);
 	} else {
-		ret = hse_mmc_write(&priv->ivt, HSE_IVT_BLK, 1);
-		if (ret) {
-			printf("ERROR: ivt write failed!\n");
-			return ret;
-		}
+		offset = HSE_IVT_BLK * SD_SECTOR_SIZE;
+		length = SD_SECTOR_SIZE;
+	}
+	ret = hse_write(offset, length, (char *)&priv->ivt, qspi_boot);
+	if (ret) {
+		printf("ERROR: ivt write failed!\n");
+		return ret;
 	}
 
 	return 0;
@@ -1049,12 +1061,18 @@ int hse_enable_mus(struct hse_private *priv, u32 *recv_buf)
 static int get_ivt(struct hse_private *priv, bool qspi_boot)
 {
 	int ret = 0;
+	u32 offset;
+	size_t length;
 
-	if (qspi_boot)
-		ret = spi_flash_read(qspi_flash, HSE_IVT_QSPI_OFFSET,
-								sizeof(priv->ivt), (void *)&priv->ivt);
-	else
-		ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
+	if (qspi_boot) {
+		offset = HSE_IVT_QSPI_OFFSET;
+		length = sizeof(priv->ivt);
+	} else {
+		offset = HSE_IVT_BLK * SD_SECTOR_SIZE;
+		length = SD_SECTOR_SIZE;
+	}
+
+	ret = hse_read(offset, length, (void *)&priv->ivt, qspi_boot);
 
 	return ret;
 }
@@ -1062,23 +1080,23 @@ static int get_ivt(struct hse_private *priv, bool qspi_boot)
 static int get_app_header(struct hse_private *priv, bool qspi_boot)
 {
 	int ret = 0;
+	u32 offset;
+	size_t length;
 
 	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
-		if (qspi_boot )
-			ret = spi_flash_read(qspi_flash, priv->ivt.app_boot,
-								sizeof(priv->app_boot_hdr), (void *)&priv->app_boot_hdr);
-		else
-			ret = hse_mmc_read((void *)&priv->app_boot_hdr,
-								(priv->ivt.app_boot / 512), 1);
+		offset = priv->ivt.app_boot;
 	} else {
-		if (qspi_boot )
-			ret = spi_flash_read(qspi_flash, priv->ivt.autosar_image_off,
-								sizeof(priv->app_boot_hdr), (void *)&priv->app_boot_hdr);
-		else
-			ret = hse_mmc_read((void *)&priv->app_boot_hdr,
-								 (priv->ivt.autosar_image_off/ 512), 1);
+		offset = priv->ivt.autosar_image_off;
 	}
 
+	if (qspi_boot) {
+		length = sizeof(priv->app_boot_hdr);
+	} else {
+		length = SD_SECTOR_SIZE;
+	}
+
+	ret = hse_read(offset, length, (void *)&priv->app_boot_hdr, qspi_boot);
+
 	return ret;
 }
 
@@ -1271,6 +1289,8 @@ static int do_hse_keystore_format(struct cmd_tbl *cmdtp, int flag,
 	u64 hse_resmem;
 	int hse_nodeoffset, ret;
 	bool qspi_boot = false;
+	u32 offset;
+	size_t length;
 
 	if (argc < 2) {
 		printf("USAGE: hse_secboot_enable <device>\n");
@@ -1317,11 +1337,14 @@ static int do_hse_keystore_format(struct cmd_tbl *cmdtp, int flag,
 	memset((void *)priv, 0, sizeof(struct hse_private));
 
 	/* read ivt */
-	if (qspi_boot)
-		ret = spi_flash_read(qspi_flash, HSE_IVT_QSPI_OFFSET,
-								sizeof(priv->ivt), (void *)&priv->ivt);
-	else
-		ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
+	if (qspi_boot) {
+		offset = HSE_IVT_QSPI_OFFSET;
+		length = sizeof(priv->ivt);
+	} else {
+		offset = HSE_IVT_BLK  *SD_SECTOR_SIZE;
+		length = SD_SECTOR_SIZE;
+	}
+	ret = hse_read(offset, length, (void *)&priv->ivt, qspi_boot);
 	if (ret) {
 		printf("ERROR: ivt read failed!\n");
 		return ret;
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index 15a0d3997c..bed0987a70 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -41,6 +41,7 @@
 #define HSE_EXT_FLASH_PAGE_QSPI	0x1000u
 
 #define QSPI_BLOCK_SIZE 0x10000u
+#define SD_SECTOR_SIZE 0x200u
 
 #define HSE_CHANNEL_ADMIN   0u
 #define HSE_CHANNEL_GENERAL 1u
-- 
2.34.1

