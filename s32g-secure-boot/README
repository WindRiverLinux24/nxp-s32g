	Secure Boot High Level Design On NXP S32G Platform

1. About this document
======================
This document provides detail description about how to enable secure
boot on S32G2-EVB, S32G274A-RDB2, S32G3-EVB and S32G399A-RDB3 boards.
It includes the implementation principles of secure boot, implementation
example step by step and so on.

Dependencies
------------
This layer depends on the nxp-s32g BSP layer supplied by Wind River Linux

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the s32g-secure-boot layer
-----------------------------------
This layer and nxp-s32g BSP layer should be added to bblayers.conf.

Statement
---------
Before starting secure boot feature development, please read this README and other
reference Documents listed in section 5.

This layer is only used for assisting users to develop their products.
About the final product, it needs to program the fuse module in the SoC.

2. Preparations & Prerequisites
===============================
To use secure boot feature, assume that you are:
 - Experienced with WRL linux embedded software development
 - Familiar with ARMv8 and S32G274A/399A SoC architecture.
 - Familiar with the basic concepts of security, like openssl, authentication,
   encryption, hardware root trust, RSA, AES, key source, certificate, etc.
 - Faimiar with HSE of S32G274A/399A SoC, and have contacted NXP get the access to Flexera.

Hardware Preparations:
 - A host machine installed with wrlinux product.
 - S32G2-EVB, S32G274A-RDB2, S32G3-EVB and S32G399A-RDB3 development boards.
 - An SD Card.

Jumper/Switch configuration for SD boot:

S32G2-EVB/S32G3-EVB:
J50: Connect pin1 and pin2
SW6: bit7 ON
SW7: All bits OFF
SW8: All bits OFF
SW9: All bits OFF
SW14: bit1 ON, bit2 OFF
SW15: All bits OFF

S32G274A-RDB2/S32G399A-RDB3:
SW3: OFF
SW4: bit7 ON
SW5: All bits OFF
SW6: All bits OFF
SW7: All bits OFF
SW9: All bits OFF
SW10: bit1 ON, bit2 OFF

Jumper/Switch configuration for QSPI boot:

S32G2-EVB/S32G3-EVB:
J50: Connect pin1 and pin2
SW6: All bits OFF
SW7: All bits OFF
SW8: All bits OFF
SW9: All bits OFF
SW14: bit1 ON, bit2 OFF
SW15: All bits OFF

S32G274A-RDB2/S32G399A-RDB3:
SW3: OFF
SW4: All bits OFF
SW5: All bits OFF
SW6: All bits OFF
SW7: All bits OFF
SW9: All bits OFF
SW10: bit1 ON, bit2 OFF

Software Preparations:
 - Wrlinux product with nxp-s32g BSP
 - HSE firmware for S32G274A/399A SoC

3. Secure Boot Process
======================
Secure boot refers to a two-stage process of successive authentication of the fip.bin
and Linux kernel images. This process requires a "root of trust", which is known to
be secure. In this case, the root of trust is HSE itself. Each image is authenticated
by the preceding step. Thus, the secure boot flow is the following:

 - BootROM passes control over to HSE FW.

 - HSE FW authenticates the fip.bin image.

 - U-Boot authenticates the fitImage that includes kernel and dtb images.

3.1 Obtain HSE Firmware
-----------------------
Apply for assess right with NXP and then download HSE firmware from below link
https://nxp.flexnetoperations.com/control/frse/product?child_plneID=820667

S32G2 HSE FW Standard 0.1.0.5 is for S32G274A plarform 
The HSE firmware file is s32g2xx_hse_fw_0.1.0_1.0.5_pb220413.bin.pink

HSE FW 0.0.21.0 BETA Release is for S32G399A plarform
The HSE firmware file is s32g3xx_hse_fw_0.20.0_0.21.0_pb220520.bin.pink

3.2 Build nxp-s32g BSP With Secure Boot Feature
-----------------------------------------------
So far, the nxp-s32g secure boot feature based on HSE module had been integrated into
Yocto build environment. If customer build WRLinux with s32g-secure-boot layer and
set the HSE firmware file path correctly, the final built image will include secure boot
feature.

Detail steps as below:
	$ mkdir <path_to_project>
	$ cd <path_to_project>
	$ <path_to_wrlinux>/wrlinux-x/setup.sh --machine nxp-s32g --distro wrlinux --dl-layers --all-layers --accept-eula=yes
	$ source ./environment-setup-x86_64-wrlinuxsdk-linux
	$ source ./oe-init-build-env
	open the conf/local.conf file, and set the HSE firmware file path like below
	HSE_LOCAL_FIRMWARE_DIR = "<path of including HSE firmware files>"
	HSE_FW_NAME_S32G2 = "s32g2xx_hse_fw_0.1.0_1.0.5_pb220413.bin.pink"
	HSE_FW_NAME_S32G3 = "s32g3xx_hse_fw_0.20.0_0.21.0_pb220520.bin.pink"
	below setting for RSA private key is optional
	FIP_SIGN_KEYDIR = "<path of customer own RSA private key>"
	HSE_SEC_PRI_KEY = "<name of customer own RSA private key>"
	$ bitbake-layers add-layer <path_to_project>/layers/nxp-s32g/s32g-secure-boot
	$ bitbake wrlinux-image-std

Note1:
When building nxp-s32g BSP project with secure boot layer, the kernel image type is fitImage that
includes dtb and kernel image. They are all signed by the private key of a RSA-2048 key that is in
<path_to_project>/layers/nxp-s32g/s32g-secure-boot/s32g-sample-key/fitImage-rsa2048-keys.

Note2:
When building nxp-s32g BSP project with secure boot layer, the atf+u-boot is signed by the private key
that is in <path_to_project>/layers/nxp-s32g/s32g-secure-boot/s32g-sample-key/fip-rsa2048-keys.
If customers want to use their own RSA key, they could generate it with below command:
	# openssl genrsa -out <rsa-key-name>
Customers have 2 methods to ingegrate their own RSA key into building project.
 - Replace the sample key with their own RSA key in directory <path_to_project>/layers/nxp-s32g/
   s32g-secure-boot/s32g-sample-key/fip-rsa2048-keys directly.
 - Set the path and name of their own RSA key with below 2 variables in local.conf file
	FIP_SIGN_KEYDIR = "<path of customer own RSA private key>"
	HSE_SEC_PRI_KEY = "<name of customer own RSA private key>"

The secure boot layer is an internal layer only for BSP nxp-s32g, it doesn't support to add
this layer with --layer option during setup project.

3.3 Secure Boot First Stage
---------------------------
The first stage of secure boot is the bootloader booting up stage. In this stage, the image components in
bootloader is verified by HSE module.

3.3.1 Bootloader Generation
---------------------------
During build the nxp-s32g BSP, there is a package named atf-s32g that is used to generate the bootloader.
Because u-boot is one of the image component of bootloader, the package u-boot-s32 is built before atf-s32g,
and generate the u-boot image u-boot-nodtb.bin. After atf-s32g is built completely, there will be a bootloader
image named fip.s32 generated, and its layout as below.

SD Image Layout
        IVT:                    Offset: 0x1000          Size: 0x100
        HSE Firmware:           Offset: 0x1200
        HSE SYS Image:          Offset: 0x52400         Size: 0xc000
        AppBootCode Header:     Offset: 0x5e400         Size: 0x40
        Application:            Offset: 0x5e440         Size: 0x12e400

QSPI Image Layout
        IVT: 					Offset: 0x0 			Size: 0x100
        QSPI Parameters: 		Offset: 0x200 			Size: 0x200
        DCD: 					Offset: 0x800 			Size: 0x34
        HSE Firmware: 			Offset: 0xc38
        HSE SYS Image: 			Offset: 0x52a18 		Size: 0xc000
        AppBootCode Header: 	Offset: 0x5ee18 		Size: 0x40
        Application: 			Offset: 0x5ee58 		Size: 0x40000

3.3.2 Bootloader components
---------------------------

3.3.2.1 Image Vector Table (IVT)
--------------------------------
The IVT is the first image that BootROM reads from the boot device. The IVT contains the required data
components: image entry point, pointer to Device Configuration Data (DCD), and other pointers used by
BootROM during the boot process. The location of the IVT is the only fixed requirement by BootROM, for
SD card, the IVT offset is 0x1000. In IVT, the BOOT_SEQ bit of Boot Configuration Word is used to decide
whether enable secure boot flow. Detailed info please refer to [1] of section 5.

3.3.2.2 HSE Firmware
--------------------
The HSE firmware is a software product specifically designed to run in the HSE subsystem. It essentially
serves the host (application cores) with a set of native security services as below:
 - Administration services are provided to install, configure and test the HSE firmware;
 - Key management services are available for the application to manage different set of keys that are
   handled by the HSE firmware via e.g., the cryptographic services;
 - Cryptographic services provide the application with cryptographic primitives that are used by high-level
   security stacks in the application;
 - Random number services generate random streams that can be used in various security protocols;
 - Memory verification services allow the application to verify different memory areas at start-up (after reset)
   and during run-time;
 - Monotonic counter services provide the application with a set of monotonic counters that can be read and only
   incremented;
 - Secure time services allow the configuration of a secure tick to be signaled to the application;
 - Network services provide support for acceleration the network security protocols (IPsec, SSL/TLS).

Detailed info please refer to [2] of section 5.

3.3.2.3 HSE SYS Image
---------------------
The system configuration is saved in HSE SYS Image, which contains data related to imported keys, Secure Memory
Region (SMR) configuration and Core Reset (CR) entry configuration. The HSE SYS Image is signed with a device-specific key.
The keys used for ASB are stored in a NVM key catalog, which contains multiple slots for multiple key types and
authentication schemes.
 - The keys used by HSE are stored in a NVM key catalog, which contains multiple slots for multiple key types
   and authentication schemes.
 - The Secure Memory Region entry is used to define which data needs to be authenticated from the boot media,
   which key and authentication scheme is required, and where to place the data in memory after authentication.
 - The Core Reset entry is used to define which core should be enabled and what address to jump to after authentication,
   as well as what action to take in case authentication fails.

3.3.2.4 AppBootCode Header
--------------------------
There are 64 bytes space for AppBootCode Header, its layout as below:

-------------------------------------------------------------------------------------------------------------------------------------
Offset		Size(bytes)			Name					Comment
-------------------------------------------------------------------------------------------------------------------------------------
0h		4				Image header mark  		Marks start of application image.
-------------------------------------------------------------------------------------------------------------------------------------
4h		4				RAM start pointer		Pointer to the first RAM address to which BootROM
										must load application boot code.
-------------------------------------------------------------------------------------------------------------------------------------
8h		4				RAM entry pointer		Pointer to out of RESET start of boot target core.
										For Cortex-M7, it corresponds to VTOR. For A53, it
										corresponds to start of code execution. This pointer
										should be within the section of SRAM where the
										application image is downloaded.
-------------------------------------------------------------------------------------------------------------------------------------
Ch		4				Code length			Length of code section of the image.
-------------------------------------------------------------------------------------------------------------------------------------
10h		48				Reserved			Reserved
-------------------------------------------------------------------------------------------------------------------------------------

3.3.2.5 Application
-------------------
It is the most important component of the bootloader. Actually, it is the fip.bin, its layout as below:

---------------------------------------------------------------------------------
Offset		Size(bytes)			Name
---------------------------------------------------------------------------------
0x100		0x5A364				Trusted Boot Firmware BL2
---------------------------------------------------------------------------------
0x5A470		0x17F51				EL3 Runtime Firmware BL31
---------------------------------------------------------------------------------
0x723D0		0xB3AD8				Non-Trusted Firmware BL33(u-boot)
---------------------------------------------------------------------------------
0x125EB0	0x83B8				Firmware Configuration(DTB)
---------------------------------------------------------------------------------
0x12E270	0x100				Certification of above 4 parts
---------------------------------------------------------------------------------

3.3.3 Target Configuration
--------------------------

3.3.3.1 Enable First Stage Secure Boot With U-BOOT Command
----------------------------------------------------------
A below U-Boot command is provided to enable the target board enter secure boot mode.

SD boot mode:
	=> hse_secboot_enable sd rsa2048_public.der
QSPI boot mode:
	=> hse_secboot_enable qspi rsa2048_public.der

The steps taken by the command are the following:
1. Check if HSE FW has been initialized;
2. Read the IVT from the boot media;
3. If no SYS_IMG exists:
	(a) Configure the HSE NVM and RAM key catalogs;
4. Import the RSA public key into the NVM key catalog;
5. Configure and install the Core Reset entry;
6. Configure and install the Secure Memory Region entry;
7. Generate the signed SYS_IMG;
8. Write the SYS_IMG back onto the boot media;
9. Set appropriate pointers in the IVT;
10. Set the BOOT_SEQ bit;
11. Write the IVT back onto the boot media;

The <public_key_file>.der refers to the public RSA key on the SD Card boot partition.
It is generated during build BSP project in section 3.2.

After the command is finished, simply reset the board to boot in secure mode.
To verify whether the board has booted in secure mode, check the BOOT_SEQ bit in the IVT at offset 0x28
with below commands

SD boot mode:
	=> mmc read ${loadaddr} 8 1
QSPI boot mode:
	=> sf read ${loadaddr} 0 0x100

	=> md.b ${loadaddr} 30
	0 2 4 6 8 A C E
	800000020 d101 0060 0000 0000 0000 0000 0000 0000
	800000030 0000 0000 0000 0000 0014 0000 0000 0000
	800000040 00e6 0500 0000 0000 0900 0000 0000 0000

3.3.3.2 Enable First Stage Secure Boot With User Space Application
------------------------------------------------------------------
Based on NXP SDK BSP35, there is a user space application that is able to be used to enable
the first stage secure boot feature. Detailed steps as below:

	1. Booting up system normally as usual.
	2. Log in system with "root" as the account name, and then run below commands.
		# mount /dev/mmcblk0p1 /mnt/
		# cp /mnt/rsa2048_public.pem ./
		# umount /mnt
SD boot mode:
		# hse-secboot -s -k ./rsa2048_public.pem -d /dev/mmcblk0
QSPI boot mode:
		# hse-secboot -q -s -k ./rsa2048_public.pem -d /dev/mtd0
	3. Power off board.
	4. Power on board, now secure boot had been enabled.
	   If bootloader image is verified successfully by HSE firmware, board will enter u-boot normally.

Note:
The above 2 solutions of enabling secure boot exclude from each other, user should only use one of them to
enable secure boot feature. If user enable secure boot with one solution and then run another one again,
this may cause uncertain issues to secure boot feature. So please aovid enabling secure boot repeatedly.

3.4 Secure Boot Second Stage
----------------------------

3.4.1 Load fitImage
-------------------
There is a fitImage in boot partition, it can support below 4 boards.

S32G2-EVB
S32G274A-RDB2
S32G3-EVB
S32G399A-RDB3

Load the fitImage with below command
	=> fatload mmc 0:1 0xc4000000 fitImage


3.4.2 Set Environment Variables
-------------------------------
Set proper bootargs for sd booting mode
	=> run mmcargs

3.4.3 Run fitImage
------------------
Run fitImage below command

	=> bootm 0xc4000000#conf-<board name>.dtb
For example:
	=> bootm 0xc4000000#conf-s32g2xxa-evb.dtb

Note: About other boot parameters setting, please refer to README in BSP layer directory.
	
3.4.4 Verifiable fitImage
-------------------------
In generally, the rsa cryptographic algorithms is used to sign the fitImage with a
private key of the ras2048 key pair that is only owned by the signer. But anyone who
has the public key of the ras2048 key pair can verifiy the fitImage.
In wrlinux, the fitImage is signed with the private key during building linux-yocto kernel,
and the public key is combined with the board specific dtb file of Arm Trust Firmware.
The dtb file with public key will be passed to u-boot during it starts up, and then it
verifies the fitImage with the public key.

The detailed signature and verification process as follows:


      Signing                                      Verification
      =======                                      ============

 +--------------+                   *
 | 2048 RSA	|                   *             +---------------+
 | key pair     |                   *             | Public key in |
 +--------------+       +------> Public key ----->| trusted u-boot|
        |               |           *             +---------------+
        |               |           *                    |
        v               |           *                    v
   +---------+          |           *             +---------------+
   |         |----------+           *             |u-boot verify  |
   | Signer  |                      *             |the fitImage   |
   |         |----------+           *             |signed with	  |--> yes/no
   +---------+          |           *             |the rsa2048	  |
        ^               |           *             |private key    |
        |               |           *             +---------------+
        |               |           *                    ^
   +----------+         |           *                    |
   | Software |         +----> Signed fitImage ----------+
   |  image   |                     *
   +----------+                     *


5. References
=============

[1] S32G274A Reference Manual
[2] HSE Firmware Product Brief.pdf
[3] S32G2_LinuxBSP_33.0_User_Manual.pdf
[4] S32G3_LinuxBSP_33.0_User_Manual.pdf
[5] S32G2 Boot Process.pdf
[6] HSE_secure_boot.pdf
[7] S32G2XX_HSE_Service_API_Reference_Manual.pdf
[8] HSE_DEMOAPP_S32G274_0_0_8_5_ReadMe.pdf
[9] RM649906-HSE_HM Firmware Reference Manual(0.6).pdf

6. Known issue
==============

1. So far, secure boot image only is able to be deployed in SD card,
   deployment in eMMC is not supported.
